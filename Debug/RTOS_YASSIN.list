
RTOS_YASSIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004568  20000064  08003124  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045cc  08003124  000245cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b08  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c0  00000000  00000000  00027b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00029058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00029560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001717  00000000  00000000  000299a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b45  00000000  00000000  0002b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001112e  00000000  00000000  00030c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00041d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001270  00000000  00000000  00041d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08002f18 	.word	0x08002f18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08002f18 	.word	0x08002f18

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10a      	bne.n	80002fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002e4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80002e8:	f383 8811 	msr	BASEPRI, r3
 80002ec:	f3bf 8f6f 	isb	sy
 80002f0:	f3bf 8f4f 	dsb	sy
 80002f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002f6:	bf00      	nop
 80002f8:	e7fe      	b.n	80002f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80002fa:	f001 fd5f 	bl	8001dbc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000306:	68f9      	ldr	r1, [r7, #12]
 8000308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	441a      	add	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2200      	movs	r2, #0
 8000318:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032a:	3b01      	subs	r3, #1
 800032c:	68f9      	ldr	r1, [r7, #12]
 800032e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000330:	fb01 f303 	mul.w	r3, r1, r3
 8000334:	441a      	add	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	22ff      	movs	r2, #255	; 0xff
 800033e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d114      	bne.n	800037a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d01a      	beq.n	800038e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3310      	adds	r3, #16
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f87f 	bl	8001460 <xTaskRemoveFromEventList>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d012      	beq.n	800038e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <xQueueGenericReset+0xcc>)
 800036a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	f3bf 8f4f 	dsb	sy
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	e009      	b.n	800038e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3310      	adds	r3, #16
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fef6 	bl	8000170 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3324      	adds	r3, #36	; 0x24
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fef1 	bl	8000170 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800038e:	f001 fd45 	bl	8001e1c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	e000ed04 	.word	0xe000ed04

080003a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	4613      	mov	r3, r2
 80003ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80003b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003b8:	f383 8811 	msr	BASEPRI, r3
 80003bc:	f3bf 8f6f 	isb	sy
 80003c0:	f3bf 8f4f 	dsb	sy
 80003c4:	61bb      	str	r3, [r7, #24]
    }
 80003c6:	bf00      	nop
 80003c8:	e7fe      	b.n	80003c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	fb02 f303 	mul.w	r3, r2, r3
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <xQueueGenericCreate+0x48>
 80003da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d101      	bne.n	80003ec <xQueueGenericCreate+0x4c>
 80003e8:	2301      	movs	r3, #1
 80003ea:	e000      	b.n	80003ee <xQueueGenericCreate+0x4e>
 80003ec:	2300      	movs	r3, #0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10a      	bne.n	8000408 <xQueueGenericCreate+0x68>
        __asm volatile
 80003f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003f6:	f383 8811 	msr	BASEPRI, r3
 80003fa:	f3bf 8f6f 	isb	sy
 80003fe:	f3bf 8f4f 	dsb	sy
 8000402:	617b      	str	r3, [r7, #20]
    }
 8000404:	bf00      	nop
 8000406:	e7fe      	b.n	8000406 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800040e:	d90a      	bls.n	8000426 <xQueueGenericCreate+0x86>
        __asm volatile
 8000410:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000414:	f383 8811 	msr	BASEPRI, r3
 8000418:	f3bf 8f6f 	isb	sy
 800041c:	f3bf 8f4f 	dsb	sy
 8000420:	613b      	str	r3, [r7, #16]
    }
 8000422:	bf00      	nop
 8000424:	e7fe      	b.n	8000424 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	3348      	adds	r3, #72	; 0x48
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fd80 	bl	8001f30 <pvPortMalloc>
 8000430:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000432:	6a3b      	ldr	r3, [r7, #32]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00d      	beq.n	8000454 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3348      	adds	r3, #72	; 0x48
 8000440:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	6a3b      	ldr	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	4613      	mov	r3, r2
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	68b9      	ldr	r1, [r7, #8]
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 f805 	bl	800045e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000454:	6a3b      	ldr	r3, [r7, #32]
    }
 8000456:	4618      	mov	r0, r3
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d103      	bne.n	800047a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	69ba      	ldr	r2, [r7, #24]
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	e002      	b.n	8000480 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800048c:	2101      	movs	r1, #1
 800048e:	69b8      	ldr	r0, [r7, #24]
 8000490:	f7ff ff1e 	bl	80002d0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80004b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10a      	bne.n	80004ce <xQueueGenericSend+0x32>
        __asm volatile
 80004b8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004bc:	f383 8811 	msr	BASEPRI, r3
 80004c0:	f3bf 8f6f 	isb	sy
 80004c4:	f3bf 8f4f 	dsb	sy
 80004c8:	623b      	str	r3, [r7, #32]
    }
 80004ca:	bf00      	nop
 80004cc:	e7fe      	b.n	80004cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <xQueueGenericSend+0x40>
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <xQueueGenericSend+0x44>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <xQueueGenericSend+0x46>
 80004e0:	2300      	movs	r3, #0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10a      	bne.n	80004fc <xQueueGenericSend+0x60>
        __asm volatile
 80004e6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004ea:	f383 8811 	msr	BASEPRI, r3
 80004ee:	f3bf 8f6f 	isb	sy
 80004f2:	f3bf 8f4f 	dsb	sy
 80004f6:	61fb      	str	r3, [r7, #28]
    }
 80004f8:	bf00      	nop
 80004fa:	e7fe      	b.n	80004fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d103      	bne.n	800050a <xQueueGenericSend+0x6e>
 8000502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000506:	2b01      	cmp	r3, #1
 8000508:	d101      	bne.n	800050e <xQueueGenericSend+0x72>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <xQueueGenericSend+0x74>
 800050e:	2300      	movs	r3, #0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <xQueueGenericSend+0x8e>
        __asm volatile
 8000514:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	61bb      	str	r3, [r7, #24]
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800052a:	f001 fc47 	bl	8001dbc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	429a      	cmp	r2, r3
 8000538:	d302      	bcc.n	8000540 <xQueueGenericSend+0xa4>
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d129      	bne.n	8000594 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000546:	f000 f957 	bl	80007f8 <prvCopyDataToQueue>
 800054a:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	2b00      	cmp	r3, #0
 8000552:	d010      	beq.n	8000576 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000556:	3324      	adds	r3, #36	; 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ff81 	bl	8001460 <xTaskRemoveFromEventList>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	f3bf 8f6f 	isb	sy
 8000574:	e00a      	b.n	800058c <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <xQueueGenericSend+0x1c8>)
 800057e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	f3bf 8f4f 	dsb	sy
 8000588:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800058c:	f001 fc46 	bl	8001e1c <vPortExitCritical>
                return pdPASS;
 8000590:	2301      	movs	r3, #1
 8000592:	e063      	b.n	800065c <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800059a:	f001 fc3f 	bl	8001e1c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	e05c      	b.n	800065c <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 ffb9 	bl	8001524 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80005b6:	f001 fc31 	bl	8001e1c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80005ba:	f000 fd71 	bl	80010a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80005be:	f001 fbfd 	bl	8001dbc <vPortEnterCritical>
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d103      	bne.n	80005d8 <xQueueGenericSend+0x13c>
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d103      	bne.n	80005ee <xQueueGenericSend+0x152>
 80005e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ee:	f001 fc15 	bl	8001e1c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ffa8 	bl	8001550 <xTaskCheckForTimeOut>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d124      	bne.n	8000650 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000608:	f000 f9ee 	bl	80009e8 <prvIsQueueFull>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d018      	beq.n	8000644 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000614:	3310      	adds	r3, #16
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fefc 	bl	8001418 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000622:	f000 f979 	bl	8000918 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000626:	f000 fd49 	bl	80010bc <xTaskResumeAll>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f47f af7c 	bne.w	800052a <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	e772      	b.n	800052a <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000646:	f000 f967 	bl	8000918 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800064a:	f000 fd37 	bl	80010bc <xTaskResumeAll>
 800064e:	e76c      	b.n	800052a <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000652:	f000 f961 	bl	8000918 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000656:	f000 fd31 	bl	80010bc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800065a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800065c:	4618      	mov	r0, r3
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	e000ed04 	.word	0xe000ed04

08000668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10a      	bne.n	8000698 <xQueueReceive+0x30>
        __asm volatile
 8000682:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	623b      	str	r3, [r7, #32]
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <xQueueReceive+0x3e>
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <xQueueReceive+0x42>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <xQueueReceive+0x44>
 80006aa:	2300      	movs	r3, #0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10a      	bne.n	80006c6 <xQueueReceive+0x5e>
        __asm volatile
 80006b0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	61fb      	str	r3, [r7, #28]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006c6:	f001 fb79 	bl	8001dbc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01f      	beq.n	8000716 <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006da:	f000 f8f7 	bl	80008cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00f      	beq.n	800070e <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	3310      	adds	r3, #16
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 feb4 	bl	8001460 <xTaskRemoveFromEventList>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <xQueueReceive+0x18c>)
 8000700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800070e:	f001 fb85 	bl	8001e1c <vPortExitCritical>
                return pdPASS;
 8000712:	2301      	movs	r3, #1
 8000714:	e069      	b.n	80007ea <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800071c:	f001 fb7e 	bl	8001e1c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000720:	2300      	movs	r3, #0
 8000722:	e062      	b.n	80007ea <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	2b00      	cmp	r3, #0
 8000728:	d106      	bne.n	8000738 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fef8 	bl	8001524 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000738:	f001 fb70 	bl	8001e1c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800073c:	f000 fcb0 	bl	80010a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000740:	f001 fb3c 	bl	8001dbc <vPortEnterCritical>
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800074a:	b25b      	sxtb	r3, r3
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d103      	bne.n	800075a <xQueueReceive+0xf2>
 8000752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000760:	b25b      	sxtb	r3, r3
 8000762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000766:	d103      	bne.n	8000770 <xQueueReceive+0x108>
 8000768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000770:	f001 fb54 	bl	8001e1c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fee7 	bl	8001550 <xTaskCheckForTimeOut>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d123      	bne.n	80007d0 <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800078a:	f000 f917 	bl	80009bc <prvIsQueueEmpty>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d017      	beq.n	80007c4 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fe3b 	bl	8001418 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007a4:	f000 f8b8 	bl	8000918 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80007a8:	f000 fc88 	bl	80010bc <xTaskResumeAll>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d189      	bne.n	80006c6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <xQueueReceive+0x18c>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	e780      	b.n	80006c6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80007c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007c6:	f000 f8a7 	bl	8000918 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80007ca:	f000 fc77 	bl	80010bc <xTaskResumeAll>
 80007ce:	e77a      	b.n	80006c6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80007d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007d2:	f000 f8a1 	bl	8000918 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80007d6:	f000 fc71 	bl	80010bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007dc:	f000 f8ee 	bl	80009bc <prvIsQueueEmpty>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f43f af6f 	beq.w	80006c6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80007e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000ed04 	.word	0xe000ed04

080007f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10d      	bne.n	8000832 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d14d      	bne.n	80008ba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ffb6 	bl	8001794 <xTaskPriorityDisinherit>
 8000828:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	e043      	b.n	80008ba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d119      	bne.n	800086c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6858      	ldr	r0, [r3, #4]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	461a      	mov	r2, r3
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	f002 fb52 	bl	8002eec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	d32b      	bcc.n	80008ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	e026      	b.n	80008ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68d8      	ldr	r0, [r3, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	461a      	mov	r2, r3
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	f002 fb38 	bl	8002eec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	425b      	negs	r3, r3
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	425b      	negs	r3, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d105      	bne.n	80008ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80008c2:	697b      	ldr	r3, [r7, #20]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d018      	beq.n	8000910 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	441a      	add	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d303      	bcc.n	8000900 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	461a      	mov	r2, r3
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f002 faee 	bl	8002eec <memcpy>
    }
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000920:	f001 fa4c 	bl	8001dbc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800092a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800092c:	e011      	b.n	8000952 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	2b00      	cmp	r3, #0
 8000934:	d012      	beq.n	800095c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3324      	adds	r3, #36	; 0x24
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fd90 	bl	8001460 <xTaskRemoveFromEventList>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000946:	f000 fe69 	bl	800161c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3b01      	subs	r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dce9      	bgt.n	800092e <prvUnlockQueue+0x16>
 800095a:	e000      	b.n	800095e <prvUnlockQueue+0x46>
                        break;
 800095c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000966:	f001 fa59 	bl	8001e1c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800096a:	f001 fa27 	bl	8001dbc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000974:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000976:	e011      	b.n	800099c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d012      	beq.n	80009a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3310      	adds	r3, #16
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd6b 	bl	8001460 <xTaskRemoveFromEventList>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000990:	f000 fe44 	bl	800161c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	3b01      	subs	r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800099c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dce9      	bgt.n	8000978 <prvUnlockQueue+0x60>
 80009a4:	e000      	b.n	80009a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80009a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80009b0:	f001 fa34 	bl	8001e1c <vPortExitCritical>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009c4:	f001 f9fa 	bl	8001dbc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e001      	b.n	80009da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80009da:	f001 fa1f 	bl	8001e1c <vPortExitCritical>

    return xReturn;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009f0:	f001 f9e4 	bl	8001dbc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d102      	bne.n	8000a06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e001      	b.n	8000a0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000a0a:	f001 fa07 	bl	8001e1c <vPortExitCritical>

    return xReturn;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fa7f 	bl	8001f30 <pvPortMalloc>
 8000a32:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00e      	beq.n	8000a58 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a3a:	2054      	movs	r0, #84	; 0x54
 8000a3c:	f001 fa78 	bl	8001f30 <pvPortMalloc>
 8000a40:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4e:	e005      	b.n	8000a5c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000a50:	6978      	ldr	r0, [r7, #20]
 8000a52:	f001 fb4d 	bl	80020f0 <vPortFree>
 8000a56:	e001      	b.n	8000a5c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d013      	beq.n	8000a8a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f80e 	bl	8000a9a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f000 f89a 	bl	8000bb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	e002      	b.n	8000a90 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000a90:	69bb      	ldr	r3, [r7, #24]
    }
 8000a92:	4618      	mov	r0, r3
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b088      	sub	sp, #32
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000acc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	617b      	str	r3, [r7, #20]
    }
 8000ade:	bf00      	nop
 8000ae0:	e7fe      	b.n	8000ae0 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d01f      	beq.n	8000b28 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	e012      	b.n	8000b14 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	4413      	add	r3, r2
 8000af4:	7819      	ldrb	r1, [r3, #0]
 8000af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	4413      	add	r3, r2
 8000afc:	3334      	adds	r3, #52	; 0x34
 8000afe:	460a      	mov	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d9e9      	bls.n	8000aee <prvInitialiseNewTask+0x54>
 8000b1a:	e000      	b.n	8000b1e <prvInitialiseNewTask+0x84>
            {
                break;
 8000b1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000b26:	e003      	b.n	8000b30 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d901      	bls.n	8000b3a <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b36:	2304      	movs	r3, #4
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	2200      	movs	r2, #0
 8000b4a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4e:	3304      	adds	r3, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb2c 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b58:	3318      	adds	r3, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb27 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b64:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	f1c3 0205 	rsb	r2, r3, #5
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	334c      	adds	r3, #76	; 0x4c
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f9c2 	bl	8002f08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b86:	3350      	adds	r3, #80	; 0x50
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f9bb 	bl	8002f08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	69b8      	ldr	r0, [r7, #24]
 8000b98:	f001 f830 	bl	8001bfc <pxPortInitialiseStack>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000bc0:	f001 f8fc 	bl	8001dbc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bcc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d110      	bne.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000be4:	f000 fd3e 	bl	8001664 <prvInitialiseTaskLists>
 8000be8:	e00d      	b.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <prvAddNewTaskToReadyList+0xc0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d109      	bne.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d802      	bhi.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <prvAddNewTaskToReadyList+0xc4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <prvAddNewTaskToReadyList+0xc4>)
 8000c0e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2201      	movs	r2, #1
 8000c16:	409a      	lsls	r2, r3
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <prvAddNewTaskToReadyList+0xc8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <prvAddNewTaskToReadyList+0xc8>)
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <prvAddNewTaskToReadyList+0xcc>)
 8000c30:	441a      	add	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff fac4 	bl	80001c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000c3e:	f001 f8ed 	bl	8001e1c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <prvAddNewTaskToReadyList+0xc0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00e      	beq.n	8000c68 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <prvAddNewTaskToReadyList+0xd0>)
 8000c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	f3bf 8f4f 	dsb	sy
 8000c64:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000158 	.word	0x20000158
 8000c74:	20000080 	.word	0x20000080
 8000c78:	20000164 	.word	0x20000164
 8000c7c:	20000174 	.word	0x20000174
 8000c80:	20000160 	.word	0x20000160
 8000c84:	20000084 	.word	0x20000084
 8000c88:	e000ed04 	.word	0xe000ed04

08000c8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000c94:	f001 f892 	bl	8001dbc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <vTaskDelete+0x18>
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <vTaskDelete+0xf8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	e000      	b.n	8000ca6 <vTaskDelete+0x1a>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3304      	adds	r3, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fae5 	bl	800027c <uxListRemove>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d115      	bne.n	8000ce4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbc:	4932      	ldr	r1, [pc, #200]	; (8000d88 <vTaskDelete+0xfc>)
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10a      	bne.n	8000ce4 <vTaskDelete+0x58>
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <vTaskDelete+0x100>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <vTaskDelete+0x100>)
 8000ce2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3318      	adds	r3, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fac3 	bl	800027c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <vTaskDelete+0x104>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <vTaskDelete+0x104>)
 8000cfe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <vTaskDelete+0xf8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d10b      	bne.n	8000d22 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <vTaskDelete+0x108>)
 8000d12:	f7ff fa58 	bl	80001c6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <vTaskDelete+0x10c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <vTaskDelete+0x10c>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e009      	b.n	8000d36 <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <vTaskDelete+0x110>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <vTaskDelete+0x110>)
 8000d2a:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 fd07 	bl	8001740 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000d32:	f000 fd15 	bl	8001760 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000d36:	f001 f871 	bl	8001e1c <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <vTaskDelete+0x114>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d01b      	beq.n	8000d7a <vTaskDelete+0xee>
        {
            if( pxTCB == pxCurrentTCB )
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <vTaskDelete+0xf8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d116      	bne.n	8000d7a <vTaskDelete+0xee>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <vTaskDelete+0x118>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00a      	beq.n	8000d6a <vTaskDelete+0xde>
        __asm volatile
 8000d54:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d58:	f383 8811 	msr	BASEPRI, r3
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	60bb      	str	r3, [r7, #8]
    }
 8000d66:	bf00      	nop
 8000d68:	e7fe      	b.n	8000d68 <vTaskDelete+0xdc>
                portYIELD_WITHIN_API();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <vTaskDelete+0x11c>)
 8000d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000080 	.word	0x20000080
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	20000174 	.word	0x20000174
 8000d94:	2000012c 	.word	0x2000012c
 8000d98:	20000140 	.word	0x20000140
 8000d9c:	20000158 	.word	0x20000158
 8000da0:	20000164 	.word	0x20000164
 8000da4:	20000180 	.word	0x20000180
 8000da8:	e000ed04 	.word	0xe000ed04

08000dac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000db4:	f001 f802 	bl	8001dbc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <vTaskSuspend+0x18>
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <vTaskSuspend+0x120>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	e000      	b.n	8000dc6 <vTaskSuspend+0x1a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa55 	bl	800027c <uxListRemove>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d115      	bne.n	8000e04 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ddc:	493c      	ldr	r1, [pc, #240]	; (8000ed0 <vTaskSuspend+0x124>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10a      	bne.n	8000e04 <vTaskSuspend+0x58>
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	2201      	movs	r2, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <vTaskSuspend+0x128>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <vTaskSuspend+0x128>)
 8000e02:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	3318      	adds	r3, #24
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fa33 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482e      	ldr	r0, [pc, #184]	; (8000ed8 <vTaskSuspend+0x12c>)
 8000e1e:	f7ff f9d2 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e010      	b.n	8000e4a <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3350      	adds	r3, #80	; 0x50
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d105      	bne.n	8000e44 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3350      	adds	r3, #80	; 0x50
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	ddeb      	ble.n	8000e28 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000e50:	f000 ffe4 	bl	8001e1c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <vTaskSuspend+0x130>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000e5c:	f000 ffae 	bl	8001dbc <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000e60:	f000 fc7e 	bl	8001760 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000e64:	f000 ffda 	bl	8001e1c <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <vTaskSuspend+0x120>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d127      	bne.n	8000ec2 <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <vTaskSuspend+0x130>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d017      	beq.n	8000eaa <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <vTaskSuspend+0x134>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <vTaskSuspend+0xec>
        __asm volatile
 8000e82:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	60fb      	str	r3, [r7, #12]
    }
 8000e94:	bf00      	nop
 8000e96:	e7fe      	b.n	8000e96 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <vTaskSuspend+0x138>)
 8000e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f3bf 8f4f 	dsb	sy
 8000ea4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ea8:	e00b      	b.n	8000ec2 <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <vTaskSuspend+0x12c>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <vTaskSuspend+0x13c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d103      	bne.n	8000ebe <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <vTaskSuspend+0x120>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
    }
 8000ebc:	e001      	b.n	8000ec2 <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8000ebe:	f000 fa51 	bl	8001364 <vTaskSwitchContext>
    }
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000080 	.word	0x20000080
 8000ed0:	20000084 	.word	0x20000084
 8000ed4:	20000160 	.word	0x20000160
 8000ed8:	20000144 	.word	0x20000144
 8000edc:	20000164 	.word	0x20000164
 8000ee0:	20000180 	.word	0x20000180
 8000ee4:	e000ed04 	.word	0xe000ed04
 8000ee8:	20000158 	.word	0x20000158

08000eec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10a      	bne.n	8000f18 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8000f02:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f06:	f383 8811 	msr	BASEPRI, r3
 8000f0a:	f3bf 8f6f 	isb	sy
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	60fb      	str	r3, [r7, #12]
    }
 8000f14:	bf00      	nop
 8000f16:	e7fe      	b.n	8000f16 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <prvTaskIsTaskSuspended+0x58>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10a      	bne.n	8000f38 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <prvTaskIsTaskSuspended+0x5c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d005      	beq.n	8000f38 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000f38:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000144 	.word	0x20000144
 8000f48:	20000118 	.word	0x20000118

08000f4c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <vTaskResume+0x28>
        __asm volatile
 8000f5e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	60bb      	str	r3, [r7, #8]
    }
 8000f70:	bf00      	nop
 8000f72:	e7fe      	b.n	8000f72 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <vTaskResume+0xac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d037      	beq.n	8000fee <vTaskResume+0xa2>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d034      	beq.n	8000fee <vTaskResume+0xa2>
        {
            taskENTER_CRITICAL();
 8000f84:	f000 ff1a 	bl	8001dbc <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff ffaf 	bl	8000eec <prvTaskIsTaskSuspended>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d02a      	beq.n	8000fea <vTaskResume+0x9e>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3304      	adds	r3, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f96f 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <vTaskResume+0xb0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <vTaskResume+0xb0>)
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <vTaskResume+0xb4>)
 8000fbe:	441a      	add	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f7ff f8fd 	bl	80001c6 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <vTaskResume+0xac>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d307      	bcc.n	8000fea <vTaskResume+0x9e>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <vTaskResume+0xb8>)
 8000fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	f3bf 8f4f 	dsb	sy
 8000fe6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000fea:	f000 ff17 	bl	8001e1c <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000080 	.word	0x20000080
 8000ffc:	20000160 	.word	0x20000160
 8001000:	20000084 	.word	0x20000084
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <vTaskStartScheduler+0x7c>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <vTaskStartScheduler+0x80>)
 800101c:	481b      	ldr	r0, [pc, #108]	; (800108c <vTaskStartScheduler+0x84>)
 800101e:	f7ff fcfb 	bl	8000a18 <xTaskCreate>
 8001022:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d116      	bne.n	8001058 <vTaskStartScheduler+0x50>
        __asm volatile
 800102a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800102e:	f383 8811 	msr	BASEPRI, r3
 8001032:	f3bf 8f6f 	isb	sy
 8001036:	f3bf 8f4f 	dsb	sy
 800103a:	60bb      	str	r3, [r7, #8]
    }
 800103c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <vTaskStartScheduler+0x88>)
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <vTaskStartScheduler+0x8c>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <vTaskStartScheduler+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001052:	f000 fe53 	bl	8001cfc <xPortStartScheduler>
 8001056:	e00e      	b.n	8001076 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105e:	d10a      	bne.n	8001076 <vTaskStartScheduler+0x6e>
        __asm volatile
 8001060:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001064:	f383 8811 	msr	BASEPRI, r3
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	f3bf 8f4f 	dsb	sy
 8001070:	607b      	str	r3, [r7, #4]
    }
 8001072:	bf00      	nop
 8001074:	e7fe      	b.n	8001074 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <vTaskStartScheduler+0x94>)
 8001078:	681b      	ldr	r3, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000017c 	.word	0x2000017c
 8001088:	08002f30 	.word	0x08002f30
 800108c:	08001635 	.word	0x08001635
 8001090:	20000178 	.word	0x20000178
 8001094:	20000164 	.word	0x20000164
 8001098:	2000015c 	.word	0x2000015c
 800109c:	20000000 	.word	0x20000000

080010a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <vTaskSuspendAll+0x18>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <vTaskSuspendAll+0x18>)
 80010ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000180 	.word	0x20000180

080010bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <xTaskResumeAll+0x114>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10a      	bne.n	80010e8 <xTaskResumeAll+0x2c>
        __asm volatile
 80010d2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	603b      	str	r3, [r7, #0]
    }
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010e8:	f000 fe68 	bl	8001dbc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <xTaskResumeAll+0x114>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <xTaskResumeAll+0x114>)
 80010f4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <xTaskResumeAll+0x114>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d161      	bne.n	80011c2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <xTaskResumeAll+0x118>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d05d      	beq.n	80011c2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001106:	e02e      	b.n	8001166 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <xTaskResumeAll+0x11c>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3318      	adds	r3, #24
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8b1 	bl	800027c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3304      	adds	r3, #4
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f8ac 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	2201      	movs	r2, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <xTaskResumeAll+0x120>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4313      	orrs	r3, r2
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <xTaskResumeAll+0x120>)
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <xTaskResumeAll+0x124>)
 8001144:	441a      	add	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff f83a 	bl	80001c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <xTaskResumeAll+0x128>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	429a      	cmp	r2, r3
 800115e:	d302      	bcc.n	8001166 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <xTaskResumeAll+0x12c>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <xTaskResumeAll+0x11c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1cc      	bne.n	8001108 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001174:	f000 faf4 	bl	8001760 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <xTaskResumeAll+0x130>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d010      	beq.n	80011a6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001184:	f000 f836 	bl	80011f4 <xTaskIncrementTick>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <xTaskResumeAll+0x12c>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f1      	bne.n	8001184 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <xTaskResumeAll+0x130>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <xTaskResumeAll+0x12c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <xTaskResumeAll+0x134>)
 80011b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011c2:	f000 fe2b 	bl	8001e1c <vPortExitCritical>

    return xAlreadyYielded;
 80011c6:	68bb      	ldr	r3, [r7, #8]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000180 	.word	0x20000180
 80011d4:	20000158 	.word	0x20000158
 80011d8:	20000118 	.word	0x20000118
 80011dc:	20000160 	.word	0x20000160
 80011e0:	20000084 	.word	0x20000084
 80011e4:	20000080 	.word	0x20000080
 80011e8:	2000016c 	.word	0x2000016c
 80011ec:	20000168 	.word	0x20000168
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011fe:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <xTaskIncrementTick+0x144>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 808e 	bne.w	8001324 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001208:	4b4c      	ldr	r3, [pc, #304]	; (800133c <xTaskIncrementTick+0x148>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001210:	4a4a      	ldr	r2, [pc, #296]	; (800133c <xTaskIncrementTick+0x148>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d120      	bne.n	800125e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800121c:	4b48      	ldr	r3, [pc, #288]	; (8001340 <xTaskIncrementTick+0x14c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <xTaskIncrementTick+0x48>
        __asm volatile
 8001226:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800122a:	f383 8811 	msr	BASEPRI, r3
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f3bf 8f4f 	dsb	sy
 8001236:	603b      	str	r3, [r7, #0]
    }
 8001238:	bf00      	nop
 800123a:	e7fe      	b.n	800123a <xTaskIncrementTick+0x46>
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <xTaskIncrementTick+0x14c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <xTaskIncrementTick+0x150>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <xTaskIncrementTick+0x14c>)
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <xTaskIncrementTick+0x150>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <xTaskIncrementTick+0x154>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a3c      	ldr	r2, [pc, #240]	; (8001348 <xTaskIncrementTick+0x154>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	f000 fa81 	bl	8001760 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <xTaskIncrementTick+0x158>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d348      	bcc.n	80012fa <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <xTaskIncrementTick+0x14c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d104      	bne.n	800127c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <xTaskIncrementTick+0x158>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	601a      	str	r2, [r3, #0]
                    break;
 800127a:	e03e      	b.n	80012fa <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <xTaskIncrementTick+0x14c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d203      	bcs.n	800129c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001294:	4a2d      	ldr	r2, [pc, #180]	; (800134c <xTaskIncrementTick+0x158>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800129a:	e02e      	b.n	80012fa <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3304      	adds	r3, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ffeb 	bl	800027c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3318      	adds	r3, #24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ffe2 	bl	800027c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <xTaskIncrementTick+0x15c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <xTaskIncrementTick+0x15c>)
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <xTaskIncrementTick+0x160>)
 80012d8:	441a      	add	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3304      	adds	r3, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4610      	mov	r0, r2
 80012e2:	f7fe ff70 	bl	80001c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <xTaskIncrementTick+0x164>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3b9      	bcc.n	8001268 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012f8:	e7b6      	b.n	8001268 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <xTaskIncrementTick+0x164>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001300:	4914      	ldr	r1, [pc, #80]	; (8001354 <xTaskIncrementTick+0x160>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d901      	bls.n	8001316 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <xTaskIncrementTick+0x168>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e004      	b.n	800132e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <xTaskIncrementTick+0x16c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <xTaskIncrementTick+0x16c>)
 800132c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800132e:	697b      	ldr	r3, [r7, #20]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000180 	.word	0x20000180
 800133c:	2000015c 	.word	0x2000015c
 8001340:	20000110 	.word	0x20000110
 8001344:	20000114 	.word	0x20000114
 8001348:	20000170 	.word	0x20000170
 800134c:	20000178 	.word	0x20000178
 8001350:	20000160 	.word	0x20000160
 8001354:	20000084 	.word	0x20000084
 8001358:	20000080 	.word	0x20000080
 800135c:	2000016c 	.word	0x2000016c
 8001360:	20000168 	.word	0x20000168

08001364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <vTaskSwitchContext+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <vTaskSwitchContext+0xa4>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001378:	e03f      	b.n	80013fa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <vTaskSwitchContext+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <vTaskSwitchContext+0xa8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	f1c3 031f 	rsb	r3, r3, #31
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	491e      	ldr	r1, [pc, #120]	; (8001410 <vTaskSwitchContext+0xac>)
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80013aa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	607b      	str	r3, [r7, #4]
    }
 80013bc:	bf00      	nop
 80013be:	e7fe      	b.n	80013be <vTaskSwitchContext+0x5a>
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <vTaskSwitchContext+0xac>)
 80013cc:	4413      	add	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3308      	adds	r3, #8
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d104      	bne.n	80013f0 <vTaskSwitchContext+0x8c>
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <vTaskSwitchContext+0xb0>)
 80013f8:	6013      	str	r3, [r2, #0]
}
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000180 	.word	0x20000180
 8001408:	2000016c 	.word	0x2000016c
 800140c:	20000160 	.word	0x20000160
 8001410:	20000084 	.word	0x20000084
 8001414:	20000080 	.word	0x20000080

08001418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10a      	bne.n	800143e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001428:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800142c:	f383 8811 	msr	BASEPRI, r3
 8001430:	f3bf 8f6f 	isb	sy
 8001434:	f3bf 8f4f 	dsb	sy
 8001438:	60fb      	str	r3, [r7, #12]
    }
 800143a:	bf00      	nop
 800143c:	e7fe      	b.n	800143c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <vTaskPlaceOnEventList+0x44>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3318      	adds	r3, #24
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7fe fee0 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800144c:	2101      	movs	r1, #1
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f000 fb6e 	bl	8001b30 <prvAddCurrentTaskToDelayedList>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000080 	.word	0x20000080

08001460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001476:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	60fb      	str	r3, [r7, #12]
    }
 8001488:	bf00      	nop
 800148a:	e7fe      	b.n	800148a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	3318      	adds	r3, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe fef3 	bl	800027c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <xTaskRemoveFromEventList+0xac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11c      	bne.n	80014d8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3304      	adds	r3, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe feea 	bl	800027c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	2201      	movs	r2, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <xTaskRemoveFromEventList+0xb0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <xTaskRemoveFromEventList+0xb0>)
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <xTaskRemoveFromEventList+0xb4>)
 80014c8:	441a      	add	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3304      	adds	r3, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4610      	mov	r0, r2
 80014d2:	f7fe fe78 	bl	80001c6 <vListInsertEnd>
 80014d6:	e005      	b.n	80014e4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3318      	adds	r3, #24
 80014dc:	4619      	mov	r1, r3
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <xTaskRemoveFromEventList+0xb8>)
 80014e0:	f7fe fe71 	bl	80001c6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <xTaskRemoveFromEventList+0xbc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d905      	bls.n	80014fe <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <xTaskRemoveFromEventList+0xc0>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e001      	b.n	8001502 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001502:	697b      	ldr	r3, [r7, #20]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000180 	.word	0x20000180
 8001510:	20000160 	.word	0x20000160
 8001514:	20000084 	.word	0x20000084
 8001518:	20000118 	.word	0x20000118
 800151c:	20000080 	.word	0x20000080
 8001520:	2000016c 	.word	0x2000016c

08001524 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <vTaskInternalSetTimeOutState+0x24>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <vTaskInternalSetTimeOutState+0x28>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	605a      	str	r2, [r3, #4]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000170 	.word	0x20000170
 800154c:	2000015c 	.word	0x2000015c

08001550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10a      	bne.n	8001576 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001560:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001564:	f383 8811 	msr	BASEPRI, r3
 8001568:	f3bf 8f6f 	isb	sy
 800156c:	f3bf 8f4f 	dsb	sy
 8001570:	613b      	str	r3, [r7, #16]
    }
 8001572:	bf00      	nop
 8001574:	e7fe      	b.n	8001574 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10a      	bne.n	8001592 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800157c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001580:	f383 8811 	msr	BASEPRI, r3
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	f3bf 8f4f 	dsb	sy
 800158c:	60fb      	str	r3, [r7, #12]
    }
 800158e:	bf00      	nop
 8001590:	e7fe      	b.n	8001590 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001592:	f000 fc13 	bl	8001dbc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <xTaskCheckForTimeOut+0xc4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d102      	bne.n	80015b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	e026      	b.n	8001604 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <xTaskCheckForTimeOut+0xc8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d00a      	beq.n	80015d8 <xTaskCheckForTimeOut+0x88>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d305      	bcc.n	80015d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e015      	b.n	8001604 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d20b      	bcs.n	80015fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1ad2      	subs	r2, r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff98 	bl	8001524 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	e004      	b.n	8001604 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001604:	f000 fc0a 	bl	8001e1c <vPortExitCritical>

    return xReturn;
 8001608:	69fb      	ldr	r3, [r7, #28]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000015c 	.word	0x2000015c
 8001618:	20000170 	.word	0x20000170

0800161c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <vTaskMissedYield+0x14>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000016c 	.word	0x2000016c

08001634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800163c:	f000 f852 	bl	80016e4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <prvIdleTask+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d9f9      	bls.n	800163c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <prvIdleTask+0x2c>)
 800164a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001658:	e7f0      	b.n	800163c <prvIdleTask+0x8>
 800165a:	bf00      	nop
 800165c:	20000084 	.word	0x20000084
 8001660:	e000ed04 	.word	0xe000ed04

08001664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	e00c      	b.n	800168a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <prvInitialiseTaskLists+0x60>)
 800167c:	4413      	add	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fd76 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d9ef      	bls.n	8001670 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <prvInitialiseTaskLists+0x64>)
 8001692:	f7fe fd6d 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <prvInitialiseTaskLists+0x68>)
 8001698:	f7fe fd6a 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <prvInitialiseTaskLists+0x6c>)
 800169e:	f7fe fd67 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <prvInitialiseTaskLists+0x70>)
 80016a4:	f7fe fd64 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <prvInitialiseTaskLists+0x74>)
 80016aa:	f7fe fd61 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <prvInitialiseTaskLists+0x78>)
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <prvInitialiseTaskLists+0x64>)
 80016b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <prvInitialiseTaskLists+0x7c>)
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <prvInitialiseTaskLists+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000084 	.word	0x20000084
 80016c8:	200000e8 	.word	0x200000e8
 80016cc:	200000fc 	.word	0x200000fc
 80016d0:	20000118 	.word	0x20000118
 80016d4:	2000012c 	.word	0x2000012c
 80016d8:	20000144 	.word	0x20000144
 80016dc:	20000110 	.word	0x20000110
 80016e0:	20000114 	.word	0x20000114

080016e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016ea:	e019      	b.n	8001720 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80016ec:	f000 fb66 	bl	8001dbc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <prvCheckTasksWaitingTermination+0x50>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fdbd 	bl	800027c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <prvCheckTasksWaitingTermination+0x54>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <prvCheckTasksWaitingTermination+0x54>)
 800170a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <prvCheckTasksWaitingTermination+0x58>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <prvCheckTasksWaitingTermination+0x58>)
 8001714:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001716:	f000 fb81 	bl	8001e1c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f810 	bl	8001740 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <prvCheckTasksWaitingTermination+0x58>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e1      	bne.n	80016ec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000012c 	.word	0x2000012c
 8001738:	20000158 	.word	0x20000158
 800173c:	20000140 	.word	0x20000140

08001740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fccf 	bl	80020f0 <vPortFree>
                vPortFree( pxTCB );
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fccc 	bl	80020f0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <prvResetNextTaskUnblockTime+0x2c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <prvResetNextTaskUnblockTime+0x30>)
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001776:	e005      	b.n	8001784 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <prvResetNextTaskUnblockTime+0x2c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <prvResetNextTaskUnblockTime+0x30>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000110 	.word	0x20000110
 8001790:	20000178 	.word	0x20000178

08001794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <xTaskPriorityDisinherit+0xe8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d00a      	beq.n	80017ca <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80017b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	60fb      	str	r3, [r7, #12]
    }
 80017c6:	bf00      	nop
 80017c8:	e7fe      	b.n	80017c8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80017d2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017d6:	f383 8811 	msr	BASEPRI, r3
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	60bb      	str	r3, [r7, #8]
    }
 80017e4:	bf00      	nop
 80017e6:	e7fe      	b.n	80017e6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d039      	beq.n	8001872 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	2b00      	cmp	r3, #0
 8001804:	d135      	bne.n	8001872 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3304      	adds	r3, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd36 	bl	800027c <uxListRemove>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	2201      	movs	r2, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <xTaskPriorityDisinherit+0xec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4013      	ands	r3, r2
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <xTaskPriorityDisinherit+0xec>)
 800182a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f1c3 0205 	rsb	r2, r3, #5
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2201      	movs	r2, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <xTaskPriorityDisinherit+0xec>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4313      	orrs	r3, r2
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <xTaskPriorityDisinherit+0xec>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <xTaskPriorityDisinherit+0xf0>)
 8001860:	441a      	add	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	3304      	adds	r3, #4
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7fe fcac 	bl	80001c6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001872:	697b      	ldr	r3, [r7, #20]
    }
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000080 	.word	0x20000080
 8001880:	20000160 	.word	0x20000160
 8001884:	20000084 	.word	0x20000084

08001888 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800189a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	613b      	str	r3, [r7, #16]
    }
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80018b0:	f000 fa84 	bl	8001dbc <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3312      	adds	r3, #18
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	3350      	adds	r3, #80	; 0x50
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018da:	2101      	movs	r1, #1
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f927 	bl	8001b30 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <ulTaskGenericNotifyTake+0xd4>)
 80018e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80018f2:	f000 fa93 	bl	8001e1c <vPortExitCritical>

        taskENTER_CRITICAL();
 80018f6:	f000 fa61 	bl	8001dbc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3312      	adds	r3, #18
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d014      	beq.n	800193a <ulTaskGenericNotifyTake+0xb2>
            {
                if( xClearCountOnExit != pdFALSE )
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <ulTaskGenericNotifyTake+0xa0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3312      	adds	r3, #18
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	e008      	b.n	800193a <ulTaskGenericNotifyTake+0xb2>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3312      	adds	r3, #18
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <ulTaskGenericNotifyTake+0xd0>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	3350      	adds	r3, #80	; 0x50
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001948:	f000 fa68 	bl	8001e1c <vPortExitCritical>

        return ulReturn;
 800194c:	697b      	ldr	r3, [r7, #20]
    }
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000080 	.word	0x20000080
 800195c:	e000ed04 	.word	0xe000ed04

08001960 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <xTaskGenericNotify+0x2e>
        __asm volatile
 8001978:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	623b      	str	r3, [r7, #32]
    }
 800198a:	bf00      	nop
 800198c:	e7fe      	b.n	800198c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <xTaskGenericNotify+0x4a>
        __asm volatile
 8001994:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001998:	f383 8811 	msr	BASEPRI, r3
 800199c:	f3bf 8f6f 	isb	sy
 80019a0:	f3bf 8f4f 	dsb	sy
 80019a4:	61fb      	str	r3, [r7, #28]
    }
 80019a6:	bf00      	nop
 80019a8:	e7fe      	b.n	80019a8 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80019ae:	f000 fa05 	bl	8001dbc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3312      	adds	r3, #18
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80019c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4413      	add	r3, r2
 80019ce:	3350      	adds	r3, #80	; 0x50
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80019d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	3350      	adds	r3, #80	; 0x50
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d841      	bhi.n	8001a6c <xTaskGenericNotify+0x10c>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <xTaskGenericNotify+0x90>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a8b 	.word	0x08001a8b
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a23 	.word	0x08001a23
 80019fc:	08001a3f 	.word	0x08001a3f
 8001a00:	08001a4f 	.word	0x08001a4f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3312      	adds	r3, #18
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3312      	adds	r3, #18
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	605a      	str	r2, [r3, #4]
                    break;
 8001a20:	e036      	b.n	8001a90 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3312      	adds	r3, #18
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	3312      	adds	r3, #18
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	605a      	str	r2, [r3, #4]
                    break;
 8001a3c:	e028      	b.n	8001a90 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	3312      	adds	r3, #18
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]
                    break;
 8001a4c:	e020      	b.n	8001a90 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d007      	beq.n	8001a66 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3312      	adds	r3, #18
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001a64:	e014      	b.n	8001a90 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001a6a:	e011      	b.n	8001a90 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <xTaskGenericNotify+0x1bc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <xTaskGenericNotify+0x12e>
        __asm volatile
 8001a74:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a78:	f383 8811 	msr	BASEPRI, r3
 8001a7c:	f3bf 8f6f 	isb	sy
 8001a80:	f3bf 8f4f 	dsb	sy
 8001a84:	61bb      	str	r3, [r7, #24]
    }
 8001a86:	bf00      	nop
 8001a88:	e7fe      	b.n	8001a88 <xTaskGenericNotify+0x128>
                    break;
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <xTaskGenericNotify+0x130>

                    break;
 8001a8e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d139      	bne.n	8001b0c <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fbed 	bl	800027c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <xTaskGenericNotify+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <xTaskGenericNotify+0x1c0>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <xTaskGenericNotify+0x1c4>)
 8001ac2:	441a      	add	r2, r3
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f7fe fb7b 	bl	80001c6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <xTaskGenericNotify+0x18e>
        __asm volatile
 8001ad8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001adc:	f383 8811 	msr	BASEPRI, r3
 8001ae0:	f3bf 8f6f 	isb	sy
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	617b      	str	r3, [r7, #20]
    }
 8001aea:	bf00      	nop
 8001aec:	e7fe      	b.n	8001aec <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <xTaskGenericNotify+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d907      	bls.n	8001b0c <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <xTaskGenericNotify+0x1cc>)
 8001afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001b0c:	f000 f986 	bl	8001e1c <vPortExitCritical>

        return xReturn;
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001b12:	4618      	mov	r0, r3
 8001b14:	3730      	adds	r7, #48	; 0x30
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000015c 	.word	0x2000015c
 8001b20:	20000160 	.word	0x20000160
 8001b24:	20000084 	.word	0x20000084
 8001b28:	20000080 	.word	0x20000080
 8001b2c:	e000ed04 	.word	0xe000ed04

08001b30 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3304      	adds	r3, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb98 	bl	800027c <uxListRemove>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10b      	bne.n	8001b6a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4013      	ands	r3, r2
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001b68:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d10a      	bne.n	8001b88 <prvAddCurrentTaskToDelayedList+0x58>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481a      	ldr	r0, [pc, #104]	; (8001bec <prvAddCurrentTaskToDelayedList+0xbc>)
 8001b82:	f7fe fb20 	bl	80001c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b86:	e026      	b.n	8001bd6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d209      	bcs.n	8001bb4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7fe fb2d 	bl	800020c <vListInsert>
}
 8001bb2:	e010      	b.n	8001bd6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f7fe fb23 	bl	800020c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d202      	bcs.n	8001bd6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000015c 	.word	0x2000015c
 8001be4:	20000080 	.word	0x20000080
 8001be8:	20000160 	.word	0x20000160
 8001bec:	20000144 	.word	0x20000144
 8001bf0:	20000114 	.word	0x20000114
 8001bf4:	20000110 	.word	0x20000110
 8001bf8:	20000178 	.word	0x20000178

08001bfc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3b04      	subs	r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f023 0201 	bic.w	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b04      	subs	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <pxPortInitialiseStack+0x54>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b14      	subs	r3, #20
 8001c36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3b20      	subs	r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	08001c55 	.word	0x08001c55

08001c54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <prvTaskExitError+0x54>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c66:	d00a      	beq.n	8001c7e <prvTaskExitError+0x2a>
        __asm volatile
 8001c68:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	60fb      	str	r3, [r7, #12]
    }
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <prvTaskExitError+0x28>
        __asm volatile
 8001c7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	60bb      	str	r3, [r7, #8]
    }
 8001c90:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001c92:	bf00      	nop
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0fc      	beq.n	8001c94 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	00000000 	.word	0x00000000

08001cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <pxCurrentTCBConst2>)
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	6808      	ldr	r0, [r1, #0]
 8001cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cba:	f380 8809 	msr	PSP, r0
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f380 8811 	msr	BASEPRI, r0
 8001cca:	f04e 0e0d 	orr.w	lr, lr, #13
 8001cce:	4770      	bx	lr

08001cd0 <pxCurrentTCBConst2>:
 8001cd0:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop

08001cd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001cd8:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <prvPortStartFirstTask+0x1c>)
 8001cda:	6800      	ldr	r0, [r0, #0]
 8001cdc:	6800      	ldr	r0, [r0, #0]
 8001cde:	f380 8808 	msr	MSP, r0
 8001ce2:	b662      	cpsie	i
 8001ce4:	b661      	cpsie	f
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	df00      	svc	0
 8001cf0:	bf00      	nop
 8001cf2:	0000      	.short	0x0000
 8001cf4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop

08001cfc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <xPortStartScheduler+0xac>)
 8001d04:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	22ff      	movs	r2, #255	; 0xff
 8001d12:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <xPortStartScheduler+0xb0>)
 8001d28:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d30:	e009      	b.n	8001d46 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d3a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d0ef      	beq.n	8001d32 <xPortStartScheduler+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d5a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <xPortStartScheduler+0xb4>)
 8001d66:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <xPortStartScheduler+0xb8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <xPortStartScheduler+0xb8>)
 8001d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <xPortStartScheduler+0xb8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <xPortStartScheduler+0xb8>)
 8001d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001d88:	f000 f8b8 	bl	8001efc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <xPortStartScheduler+0xbc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001d92:	f7ff ffa1 	bl	8001cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001d96:	f7ff fae5 	bl	8001364 <vTaskSwitchContext>
    prvTaskExitError();
 8001d9a:	f7ff ff5b 	bl	8001c54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	e000e400 	.word	0xe000e400
 8001dac:	20000184 	.word	0x20000184
 8001db0:	20000188 	.word	0x20000188
 8001db4:	e000ed20 	.word	0xe000ed20
 8001db8:	20000004 	.word	0x20000004

08001dbc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
        __asm volatile
 8001dc2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	607b      	str	r3, [r7, #4]
    }
 8001dd4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <vPortEnterCritical+0x58>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <vPortEnterCritical+0x58>)
 8001dde:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <vPortEnterCritical+0x58>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10f      	bne.n	8001e08 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <vPortEnterCritical+0x5c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <vPortEnterCritical+0x4c>
        __asm volatile
 8001df2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	603b      	str	r3, [r7, #0]
    }
 8001e04:	bf00      	nop
 8001e06:	e7fe      	b.n	8001e06 <vPortEnterCritical+0x4a>
    }
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000004 	.word	0x20000004
 8001e18:	e000ed04 	.word	0xe000ed04

08001e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <vPortExitCritical+0x4c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <vPortExitCritical+0x24>
        __asm volatile
 8001e2a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	607b      	str	r3, [r7, #4]
    }
 8001e3c:	bf00      	nop
 8001e3e:	e7fe      	b.n	8001e3e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <vPortExitCritical+0x4c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <vPortExitCritical+0x4c>)
 8001e48:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <vPortExitCritical+0x4c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <vPortExitCritical+0x42>
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001e5c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	00000000 	.word	0x00000000

08001e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001e70:	f3ef 8009 	mrs	r0, PSP
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <pxCurrentTCBConst>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e80:	6010      	str	r0, [r2, #0]
 8001e82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001e86:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001e8a:	f380 8811 	msr	BASEPRI, r0
 8001e8e:	f7ff fa69 	bl	8001364 <vTaskSwitchContext>
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f380 8811 	msr	BASEPRI, r0
 8001e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	6808      	ldr	r0, [r1, #0]
 8001ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ea6:	f380 8809 	msr	PSP, r0
 8001eaa:	f3bf 8f6f 	isb	sy
 8001eae:	4770      	bx	lr

08001eb0 <pxCurrentTCBConst>:
 8001eb0:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop

08001eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
        __asm volatile
 8001ebe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	607b      	str	r3, [r7, #4]
    }
 8001ed0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001ed2:	f7ff f98f 	bl	80011f4 <xTaskIncrementTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SysTick_Handler+0x40>)
 8001ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f383 8811 	msr	BASEPRI, r3
    }
 8001eee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	e000ed04 	.word	0xe000ed04

08001efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <vPortSetupTimerInterrupt+0x28>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <vPortSetupTimerInterrupt+0x2c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <vPortSetupTimerInterrupt+0x30>)
 8001f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f12:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <vPortSetupTimerInterrupt+0x28>)
 8001f16:	2207      	movs	r2, #7
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010
 8001f28:	e000e018 	.word	0xe000e018
 8001f2c:	e000e014 	.word	0xe000e014

08001f30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001f3c:	f7ff f8b0 	bl	80010a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <pvPortMalloc+0x1a8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001f48:	f000 f934 	bl	80021b4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f4c:	4b63      	ldr	r3, [pc, #396]	; (80020dc <pvPortMalloc+0x1ac>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f040 80a7 	bne.w	80020a8 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d02d      	beq.n	8001fbc <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001f60:	2208      	movs	r2, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d227      	bcs.n	8001fbc <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d021      	beq.n	8001fc2 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f023 0307 	bic.w	r3, r3, #7
 8001f84:	3308      	adds	r3, #8
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d214      	bcs.n	8001fb6 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f023 0307 	bic.w	r3, r3, #7
 8001f92:	3308      	adds	r3, #8
 8001f94:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <pvPortMalloc+0x92>
        __asm volatile
 8001fa0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	617b      	str	r3, [r7, #20]
    }
 8001fb2:	bf00      	nop
 8001fb4:	e7fe      	b.n	8001fb4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001fba:	e002      	b.n	8001fc2 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	e000      	b.n	8001fc4 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001fc2:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06e      	beq.n	80020a8 <pvPortMalloc+0x178>
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <pvPortMalloc+0x1b0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d869      	bhi.n	80020a8 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <pvPortMalloc+0x1b4>)
 8001fd6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001fd8:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <pvPortMalloc+0x1b4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fde:	e004      	b.n	8001fea <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d903      	bls.n	8001ffc <pvPortMalloc+0xcc>
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f1      	bne.n	8001fe0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <pvPortMalloc+0x1a8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	429a      	cmp	r2, r3
 8002004:	d050      	beq.n	80020a8 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2208      	movs	r2, #8
 800200c:	4413      	add	r3, r2
 800200e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	2308      	movs	r3, #8
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	429a      	cmp	r2, r3
 8002026:	d91f      	bls.n	8002068 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <pvPortMalloc+0x120>
        __asm volatile
 800203a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	613b      	str	r3, [r7, #16]
    }
 800204c:	bf00      	nop
 800204e:	e7fe      	b.n	800204e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1ad2      	subs	r2, r2, r3
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002062:	69b8      	ldr	r0, [r7, #24]
 8002064:	f000 f908 	bl	8002278 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <pvPortMalloc+0x1b0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <pvPortMalloc+0x1b0>)
 8002074:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <pvPortMalloc+0x1b0>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <pvPortMalloc+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d203      	bcs.n	800208a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <pvPortMalloc+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <pvPortMalloc+0x1b8>)
 8002088:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <pvPortMalloc+0x1ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	431a      	orrs	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <pvPortMalloc+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <pvPortMalloc+0x1bc>)
 80020a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80020a8:	f7ff f808 	bl	80010bc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <pvPortMalloc+0x19c>
        __asm volatile
 80020b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	60fb      	str	r3, [r7, #12]
    }
 80020c8:	bf00      	nop
 80020ca:	e7fe      	b.n	80020ca <pvPortMalloc+0x19a>
    return pvReturn;
 80020cc:	69fb      	ldr	r3, [r7, #28]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20004594 	.word	0x20004594
 80020dc:	200045a8 	.word	0x200045a8
 80020e0:	20004598 	.word	0x20004598
 80020e4:	2000458c 	.word	0x2000458c
 80020e8:	2000459c 	.word	0x2000459c
 80020ec:	200045a0 	.word	0x200045a0

080020f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04d      	beq.n	800219e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002102:	2308      	movs	r3, #8
 8002104:	425b      	negs	r3, r3
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4413      	add	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <vPortFree+0xb8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <vPortFree+0x44>
        __asm volatile
 800211e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002122:	f383 8811 	msr	BASEPRI, r3
 8002126:	f3bf 8f6f 	isb	sy
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	60fb      	str	r3, [r7, #12]
    }
 8002130:	bf00      	nop
 8002132:	e7fe      	b.n	8002132 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <vPortFree+0x62>
        __asm volatile
 800213c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	60bb      	str	r3, [r7, #8]
    }
 800214e:	bf00      	nop
 8002150:	e7fe      	b.n	8002150 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <vPortFree+0xb8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d11a      	bne.n	800219e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <vPortFree+0xb8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002178:	f7fe ff92 	bl	80010a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <vPortFree+0xbc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4413      	add	r3, r2
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <vPortFree+0xbc>)
 8002188:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800218a:	6938      	ldr	r0, [r7, #16]
 800218c:	f000 f874 	bl	8002278 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <vPortFree+0xc0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <vPortFree+0xc0>)
 8002198:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800219a:	f7fe ff8f 	bl	80010bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200045a8 	.word	0x200045a8
 80021ac:	20004598 	.word	0x20004598
 80021b0:	200045a4 	.word	0x200045a4

080021b4 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80021ba:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80021be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <prvHeapInit+0xac>)
 80021c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3307      	adds	r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0307 	bic.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <prvHeapInit+0xac>)
 80021e4:	4413      	add	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80021ec:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <prvHeapInit+0xb0>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <prvHeapInit+0xb0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002200:	2208      	movs	r2, #8
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0307 	bic.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <prvHeapInit+0xb4>)
 8002214:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <prvHeapInit+0xb4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <prvHeapInit+0xb4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	1ad2      	subs	r2, r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <prvHeapInit+0xb4>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <prvHeapInit+0xb8>)
 8002242:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <prvHeapInit+0xbc>)
 800224a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <prvHeapInit+0xc0>)
 800224e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000018c 	.word	0x2000018c
 8002264:	2000458c 	.word	0x2000458c
 8002268:	20004594 	.word	0x20004594
 800226c:	2000459c 	.word	0x2000459c
 8002270:	20004598 	.word	0x20004598
 8002274:	200045a8 	.word	0x200045a8

08002278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <prvInsertBlockIntoFreeList+0xa8>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e002      	b.n	800228c <prvInsertBlockIntoFreeList+0x14>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	d8f7      	bhi.n	8002286 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d108      	bne.n	80022ba <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	441a      	add	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	441a      	add	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d118      	bne.n	8002300 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <prvInsertBlockIntoFreeList+0xac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d00d      	beq.n	80022f6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e008      	b.n	8002308 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <prvInsertBlockIntoFreeList+0xac>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e003      	b.n	8002308 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d002      	beq.n	8002316 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	2000458c 	.word	0x2000458c
 8002324:	20004594 	.word	0x20004594

08002328 <Task_Init>:
extern TaskHandle_t taskHandle_t4;
extern TaskHandle_t taskHandle_t5;

QueueHandle_t xQueue1;
void Task_Init (void * PV)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

	 RCC_voidInitializeSystemClock();
 8002330:	f000 fa96 	bl	8002860 <RCC_voidInitializeSystemClock>

	 USART_VidInit(arrOfUART);
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <Task_Init+0x80>)
 8002336:	f000 fb3d 	bl	80029b4 <USART_VidInit>

	 Port_SetPinDirection(A4,OUTPUT_2);
 800233a:	2102      	movs	r1, #2
 800233c:	2004      	movs	r0, #4
 800233e:	f000 f8ff 	bl	8002540 <Port_SetPinDirection>
	 Port_SetPinMode(A4, G_PUSH_PULL);
 8002342:	2100      	movs	r1, #0
 8002344:	2004      	movs	r0, #4
 8002346:	f000 f9a9 	bl	800269c <Port_SetPinMode>
	 Dio_WriteChannel(A4, LOW);
 800234a:	2100      	movs	r1, #0
 800234c:	2004      	movs	r0, #4
 800234e:	f000 fa13 	bl	8002778 <Dio_WriteChannel>
	 Port_SetPinDirection(A5,OUTPUT_2);
 8002352:	2102      	movs	r1, #2
 8002354:	2005      	movs	r0, #5
 8002356:	f000 f8f3 	bl	8002540 <Port_SetPinDirection>
	 Port_SetPinMode(A5, G_PUSH_PULL);
 800235a:	2100      	movs	r1, #0
 800235c:	2005      	movs	r0, #5
 800235e:	f000 f99d 	bl	800269c <Port_SetPinMode>
	 Dio_WriteChannel(A5, LOW);
 8002362:	2100      	movs	r1, #0
 8002364:	2005      	movs	r0, #5
 8002366:	f000 fa07 	bl	8002778 <Dio_WriteChannel>
	 Port_SetPinDirection(A6,OUTPUT_2);
 800236a:	2102      	movs	r1, #2
 800236c:	2006      	movs	r0, #6
 800236e:	f000 f8e7 	bl	8002540 <Port_SetPinDirection>
	 Port_SetPinMode(A6, G_PUSH_PULL);
 8002372:	2100      	movs	r1, #0
 8002374:	2006      	movs	r0, #6
 8002376:	f000 f991 	bl	800269c <Port_SetPinMode>
	 Dio_WriteChannel(A6, LOW);
 800237a:	2100      	movs	r1, #0
 800237c:	2006      	movs	r0, #6
 800237e:	f000 f9fb 	bl	8002778 <Dio_WriteChannel>
	 Port_SetPinDirection(A7,OUTPUT_2);
 8002382:	2102      	movs	r1, #2
 8002384:	2007      	movs	r0, #7
 8002386:	f000 f8db 	bl	8002540 <Port_SetPinDirection>
	 Port_SetPinMode(A7, G_PUSH_PULL);
 800238a:	2100      	movs	r1, #0
 800238c:	2007      	movs	r0, #7
 800238e:	f000 f985 	bl	800269c <Port_SetPinMode>
	 Dio_WriteChannel(A7, LOW);
 8002392:	2100      	movs	r1, #0
 8002394:	2007      	movs	r0, #7
 8002396:	f000 f9ef 	bl	8002778 <Dio_WriteChannel>



	 vTaskDelete(NULL);
 800239a:	2000      	movs	r0, #0
 800239c:	f7fe fc76 	bl	8000c8c <vTaskDelete>

}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000008 	.word	0x20000008

080023ac <Task_manager>:


void Task_manager (void * PV)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]

	u8 Messege_Recieved;
	while(1){

		USART_TransmitString(UART2,"Press 'a' To access LED updates\n");
 80023b4:	4913      	ldr	r1, [pc, #76]	; (8002404 <Task_manager+0x58>)
 80023b6:	2001      	movs	r0, #1
 80023b8:	f000 fc6a 	bl	8002c90 <USART_TransmitString>
		USART_TransmitString(UART2,"Press 'b' To access LCD updates\n");
 80023bc:	4912      	ldr	r1, [pc, #72]	; (8002408 <Task_manager+0x5c>)
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 fc66 	bl	8002c90 <USART_TransmitString>
		do{
			Messege_Recieved=USART_ReceiveByte(UART2);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 fbd1 	bl	8002b6c <USART_ReceiveByte>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
		}while(Messege_Recieved !='a' && Messege_Recieved !='b' );
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b61      	cmp	r3, #97	; 0x61
 80023d2:	d002      	beq.n	80023da <Task_manager+0x2e>
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b62      	cmp	r3, #98	; 0x62
 80023d8:	d1f4      	bne.n	80023c4 <Task_manager+0x18>

		xQueueSend(xQueue1, &Messege_Recieved, (TickType_t) 100);
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <Task_manager+0x60>)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f107 010f 	add.w	r1, r7, #15
 80023e2:	2300      	movs	r3, #0
 80023e4:	2264      	movs	r2, #100	; 0x64
 80023e6:	f7fe f859 	bl	800049c <xQueueGenericSend>

		xTaskNotify(taskHandle_t3,3, eSetValueWithoutOverwrite);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <Task_manager+0x64>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	2300      	movs	r3, #0
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2304      	movs	r3, #4
 80023f4:	2203      	movs	r2, #3
 80023f6:	2100      	movs	r1, #0
 80023f8:	f7ff fab2 	bl	8001960 <xTaskGenericNotify>


		vTaskSuspend(NULL);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fcd5 	bl	8000dac <vTaskSuspend>
		USART_TransmitString(UART2,"Press 'a' To access LED updates\n");
 8002402:	e7d7      	b.n	80023b4 <Task_manager+0x8>
 8002404:	08002f38 	.word	0x08002f38
 8002408:	08002f5c 	.word	0x08002f5c
 800240c:	200045b4 	.word	0x200045b4
 8002410:	200045bc 	.word	0x200045bc

08002414 <Task_Action>:
}*/



void Task_Action(void * PV)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
 800241a:	6078      	str	r0, [r7, #4]
	u8 Message_for_Action;
	u8 Task_Action_permissionINDEX;

	while(1)
	{
		Task_Action_permissionINDEX = ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	2101      	movs	r1, #1
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fa30 	bl	8001888 <ulTaskGenericNotifyTake>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]
		if(3 == Task_Action_permissionINDEX){
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d1f4      	bne.n	800241c <Task_Action+0x8>
			xQueueReceive(xQueue1, &Message_for_Action, portMAX_DELAY);
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <Task_Action+0x84>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f107 010e 	add.w	r1, r7, #14
 800243a:	f04f 32ff 	mov.w	r2, #4294967295
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f912 	bl	8000668 <xQueueReceive>

			if('a' == Message_for_Action)
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	2b61      	cmp	r3, #97	; 0x61
 8002448:	d10d      	bne.n	8002466 <Task_Action+0x52>
						{
						USART_TransmitString(UART2,"INPUT 1\n");
 800244a:	4914      	ldr	r1, [pc, #80]	; (800249c <Task_Action+0x88>)
 800244c:	2001      	movs	r0, #1
 800244e:	f000 fc1f 	bl	8002c90 <USART_TransmitString>
						xTaskNotify(taskHandle_t4, 2,eSetValueWithoutOverwrite);
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <Task_Action+0x8c>)
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	2300      	movs	r3, #0
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2304      	movs	r3, #4
 800245c:	2202      	movs	r2, #2
 800245e:	2100      	movs	r1, #0
 8002460:	f7ff fa7e 	bl	8001960 <xTaskGenericNotify>
 8002464:	e014      	b.n	8002490 <Task_Action+0x7c>
						}
						else if('b' == Message_for_Action)
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	2b62      	cmp	r3, #98	; 0x62
 800246a:	d10d      	bne.n	8002488 <Task_Action+0x74>
						{
						USART_TransmitString(UART2,"INPUT 2\n");
 800246c:	490d      	ldr	r1, [pc, #52]	; (80024a4 <Task_Action+0x90>)
 800246e:	2001      	movs	r0, #1
 8002470:	f000 fc0e 	bl	8002c90 <USART_TransmitString>
						xTaskNotify(taskHandle_t5, 4,eSetValueWithoutOverwrite);
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <Task_Action+0x94>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2304      	movs	r3, #4
 800247e:	2204      	movs	r2, #4
 8002480:	2100      	movs	r1, #0
 8002482:	f7ff fa6d 	bl	8001960 <xTaskGenericNotify>
 8002486:	e003      	b.n	8002490 <Task_Action+0x7c>
						}
						else
						{
							USART_TransmitString(UART2,"WRONG INPUT\n");
 8002488:	4908      	ldr	r1, [pc, #32]	; (80024ac <Task_Action+0x98>)
 800248a:	2001      	movs	r0, #1
 800248c:	f000 fc00 	bl	8002c90 <USART_TransmitString>
						}

			vTaskSuspend(NULL);
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe fc8b 	bl	8000dac <vTaskSuspend>
		Task_Action_permissionINDEX = ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002496:	e7c1      	b.n	800241c <Task_Action+0x8>
 8002498:	200045b4 	.word	0x200045b4
 800249c:	08002f80 	.word	0x08002f80
 80024a0:	200045c8 	.word	0x200045c8
 80024a4:	08002f8c 	.word	0x08002f8c
 80024a8:	200045b8 	.word	0x200045b8
 80024ac:	08002f98 	.word	0x08002f98

080024b0 <Task_led>:
}
	vTaskDelete(NULL);
}*/

void Task_led	(void * PV)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	u8 LEDpermissionINDEX;
	while(1){
		LEDpermissionINDEX = ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	2101      	movs	r1, #1
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff f9e2 	bl	8001888 <ulTaskGenericNotifyTake>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
		if(2 == LEDpermissionINDEX){
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d1f4      	bne.n	80024b8 <Task_led+0x8>
		USART_TransmitString(UART2,"Press 1 To Toggle LED (1)\nPress 2 To Toggle LED (2)\nPress 3 To Toggle LED (3)\nPress 4 To Toggle LED (4)\n");
 80024ce:	4907      	ldr	r1, [pc, #28]	; (80024ec <Task_led+0x3c>)
 80024d0:	2001      	movs	r0, #1
 80024d2:	f000 fbdd 	bl	8002c90 <USART_TransmitString>



		vTaskResume(taskHandle_t2);
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <Task_led+0x40>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fd36 	bl	8000f4c <vTaskResume>
		vTaskResume(taskHandle_t3);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <Task_led+0x44>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd31 	bl	8000f4c <vTaskResume>
		LEDpermissionINDEX = ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80024ea:	e7e5      	b.n	80024b8 <Task_led+0x8>
 80024ec:	08002fa8 	.word	0x08002fa8
 80024f0:	200045c0 	.word	0x200045c0
 80024f4:	200045bc 	.word	0x200045bc

080024f8 <Task_LCD>:
			}
			vTaskDelete(NULL);
}

void Task_LCD	(void * PV)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	u8 LCDpermissionINDEX;


	while(1){
		LCDpermissionINDEX =ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	2101      	movs	r1, #1
 8002506:	2000      	movs	r0, #0
 8002508:	f7ff f9be 	bl	8001888 <ulTaskGenericNotifyTake>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
		if(4 == LCDpermissionINDEX){
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d1f4      	bne.n	8002500 <Task_LCD+0x8>
        USART_TransmitString(UART2,"Write whatever you want to be written on LCD\n");
 8002516:	4907      	ldr	r1, [pc, #28]	; (8002534 <Task_LCD+0x3c>)
 8002518:	2001      	movs	r0, #1
 800251a:	f000 fbb9 	bl	8002c90 <USART_TransmitString>


		vTaskResume(taskHandle_t2);
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <Task_LCD+0x40>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fd12 	bl	8000f4c <vTaskResume>
		vTaskResume(taskHandle_t3);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <Task_LCD+0x44>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fd0d 	bl	8000f4c <vTaskResume>
		LCDpermissionINDEX =ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002532:	e7e5      	b.n	8002500 <Task_LCD+0x8>
 8002534:	08003014 	.word	0x08003014
 8002538:	200045c0 	.word	0x200045c0
 800253c:	200045bc 	.word	0x200045bc

08002540 <Port_SetPinDirection>:
#include "../Inc/STD_TYPES.h"
#include "../Inc/BIT_MATH.h"
#include "MGPIO_interface.h"

void Port_SetPinDirection(Dio_ChannelType Copy_U8Pin,u8 Copy_U8Direction)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	460a      	mov	r2, r1
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	71bb      	strb	r3, [r7, #6]
	if ( Copy_U8Pin >= A0  && Copy_U8Pin <= A15 ){
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d834      	bhi.n	80025c0 <Port_SetPinDirection+0x80>
		if (Copy_U8Pin <= A7){
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d817      	bhi.n	800258c <Port_SetPinDirection+0x4c>
			GPIOA->CRL &= ~((0xF) << ( Copy_U8Pin * 4));
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <Port_SetPinDirection+0x150>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	210f      	movs	r1, #15
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	43d2      	mvns	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4a48      	ldr	r2, [pc, #288]	; (8002690 <Port_SetPinDirection+0x150>)
 8002570:	400b      	ands	r3, r1
 8002572:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= ( Copy_U8Direction <<(Copy_U8Pin  * 4) ) ;
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <Port_SetPinDirection+0x150>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	79b9      	ldrb	r1, [r7, #6]
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4611      	mov	r1, r2
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <Port_SetPinDirection+0x150>)
 8002586:	430b      	orrs	r3, r1
 8002588:	6013      	str	r3, [r2, #0]
		CLR_BIT(Copy_U8Pin,5);

		GPIOC->CRH &= ~((0xF) << ( (Copy_U8Pin -8) * 4));
		GPIOC->CRH |= ( Copy_U8Direction <<( ((Copy_U8Pin -8)*4))) ;
	}
}
 800258a:	e07c      	b.n	8002686 <Port_SetPinDirection+0x146>
			GPIOA->CRH &= ~((0xF) << ( (Copy_U8Pin -8) * 4));
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <Port_SetPinDirection+0x150>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	79fa      	ldrb	r2, [r7, #7]
 8002592:	3a08      	subs	r2, #8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	210f      	movs	r1, #15
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	43d2      	mvns	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4a3b      	ldr	r2, [pc, #236]	; (8002690 <Port_SetPinDirection+0x150>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= ( Copy_U8Direction <<( (Copy_U8Pin -8)*4) ) ;
 80025a6:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <Port_SetPinDirection+0x150>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	79b9      	ldrb	r1, [r7, #6]
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	3a08      	subs	r2, #8
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4611      	mov	r1, r2
 80025b8:	4a35      	ldr	r2, [pc, #212]	; (8002690 <Port_SetPinDirection+0x150>)
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6053      	str	r3, [r2, #4]
}
 80025be:	e062      	b.n	8002686 <Port_SetPinDirection+0x146>
	else if (Copy_U8Pin >= B0  && Copy_U8Pin <= B15){
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	d93b      	bls.n	800263e <Port_SetPinDirection+0xfe>
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b1f      	cmp	r3, #31
 80025ca:	d838      	bhi.n	800263e <Port_SetPinDirection+0xfe>
		CLR_BIT(Copy_U8Pin,4);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f023 0310 	bic.w	r3, r3, #16
 80025d2:	71fb      	strb	r3, [r7, #7]
		if (Copy_U8Pin  <= A7 ){
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d817      	bhi.n	800260a <Port_SetPinDirection+0xca>
			GPIOB->CRL &= ~((0xF) << ( Copy_U8Pin * 4));
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <Port_SetPinDirection+0x154>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	79fa      	ldrb	r2, [r7, #7]
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	210f      	movs	r1, #15
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	43d2      	mvns	r2, r2
 80025ea:	4611      	mov	r1, r2
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <Port_SetPinDirection+0x154>)
 80025ee:	400b      	ands	r3, r1
 80025f0:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= ( Copy_U8Direction << (Copy_U8Pin *4) ) ;
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <Port_SetPinDirection+0x154>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	79b9      	ldrb	r1, [r7, #6]
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4611      	mov	r1, r2
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <Port_SetPinDirection+0x154>)
 8002604:	430b      	orrs	r3, r1
 8002606:	6013      	str	r3, [r2, #0]
		if (Copy_U8Pin  <= A7 ){
 8002608:	e03d      	b.n	8002686 <Port_SetPinDirection+0x146>
			GPIOB->CRH &= ~((0xF) << ( (Copy_U8Pin -8) * 4));
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <Port_SetPinDirection+0x154>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	3a08      	subs	r2, #8
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	210f      	movs	r1, #15
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	43d2      	mvns	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <Port_SetPinDirection+0x154>)
 8002620:	400b      	ands	r3, r1
 8002622:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= ( Copy_U8Direction <<( (Copy_U8Pin -8)*4) ) ;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <Port_SetPinDirection+0x154>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	79b9      	ldrb	r1, [r7, #6]
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	3a08      	subs	r2, #8
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <Port_SetPinDirection+0x154>)
 8002638:	430b      	orrs	r3, r1
 800263a:	6053      	str	r3, [r2, #4]
		if (Copy_U8Pin  <= A7 ){
 800263c:	e023      	b.n	8002686 <Port_SetPinDirection+0x146>
	else if (Copy_U8Pin >= C13  && Copy_U8Pin <= C15){
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b2c      	cmp	r3, #44	; 0x2c
 8002642:	d920      	bls.n	8002686 <Port_SetPinDirection+0x146>
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b2f      	cmp	r3, #47	; 0x2f
 8002648:	d81d      	bhi.n	8002686 <Port_SetPinDirection+0x146>
		CLR_BIT(Copy_U8Pin,5);
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f023 0320 	bic.w	r3, r3, #32
 8002650:	71fb      	strb	r3, [r7, #7]
		GPIOC->CRH &= ~((0xF) << ( (Copy_U8Pin -8) * 4));
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <Port_SetPinDirection+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	3a08      	subs	r2, #8
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	210f      	movs	r1, #15
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	43d2      	mvns	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <Port_SetPinDirection+0x158>)
 8002668:	400b      	ands	r3, r1
 800266a:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= ( Copy_U8Direction <<( ((Copy_U8Pin -8)*4))) ;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <Port_SetPinDirection+0x158>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	79b9      	ldrb	r1, [r7, #6]
 8002672:	79fa      	ldrb	r2, [r7, #7]
 8002674:	3a08      	subs	r2, #8
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	4611      	mov	r1, r2
 800267e:	4a06      	ldr	r2, [pc, #24]	; (8002698 <Port_SetPinDirection+0x158>)
 8002680:	430b      	orrs	r3, r1
 8002682:	6053      	str	r3, [r2, #4]
}
 8002684:	e7ff      	b.n	8002686 <Port_SetPinDirection+0x146>
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40010800 	.word	0x40010800
 8002694:	40010c00 	.word	0x40010c00
 8002698:	40011000 	.word	0x40011000

0800269c <Port_SetPinMode>:


void Port_SetPinMode(Dio_ChannelType Copy_U8Pin,Port_PinModeType Copy_U8Mode)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	460a      	mov	r2, r1
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71bb      	strb	r3, [r7, #6]
	if ( Copy_U8Pin >= A0  && Copy_U8Pin <= A15 ){
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	d81b      	bhi.n	80026ea <Port_SetPinMode+0x4e>
		if (Copy_U8Pin <= A7){
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b07      	cmp	r3, #7
 80026b6:	d80b      	bhi.n	80026d0 <Port_SetPinMode+0x34>
			GPIOA->CRL |= ( Copy_U8Mode <<(Copy_U8Pin  * 4) ) ;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <Port_SetPinMode+0xd4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	79b9      	ldrb	r1, [r7, #6]
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <Port_SetPinMode+0xd4>)
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
	else if (Copy_U8Pin >= C13  && Copy_U8Pin <= C15){
		/*  to clear the bit that we used in define port */
		CLR_BIT(Copy_U8Pin,5);
		GPIOB->CRH |= ( Copy_U8Mode <<( (Copy_U8Pin -8)*4) ) ;
	}
}
 80026ce:	e049      	b.n	8002764 <Port_SetPinMode+0xc8>
			GPIOA->CRH |= ( Copy_U8Mode <<( (Copy_U8Pin -8)*4) ) ;
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <Port_SetPinMode+0xd4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	79b9      	ldrb	r1, [r7, #6]
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	3a08      	subs	r2, #8
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <Port_SetPinMode+0xd4>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6053      	str	r3, [r2, #4]
}
 80026e8:	e03c      	b.n	8002764 <Port_SetPinMode+0xc8>
	else if (Copy_U8Pin >= B0  && Copy_U8Pin <= B15){
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d922      	bls.n	8002736 <Port_SetPinMode+0x9a>
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2b1f      	cmp	r3, #31
 80026f4:	d81f      	bhi.n	8002736 <Port_SetPinMode+0x9a>
		CLR_BIT(Copy_U8Pin,4);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f023 0310 	bic.w	r3, r3, #16
 80026fc:	71fb      	strb	r3, [r7, #7]
		if (Copy_U8Pin  <= A7 ){
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d80b      	bhi.n	800271c <Port_SetPinMode+0x80>
			GPIOB->CRL |= ( Copy_U8Mode << (Copy_U8Pin *4) ) ;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <Port_SetPinMode+0xd8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	79b9      	ldrb	r1, [r7, #6]
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4611      	mov	r1, r2
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <Port_SetPinMode+0xd8>)
 8002716:	430b      	orrs	r3, r1
 8002718:	6013      	str	r3, [r2, #0]
		if (Copy_U8Pin  <= A7 ){
 800271a:	e023      	b.n	8002764 <Port_SetPinMode+0xc8>
			GPIOB->CRH |= ( Copy_U8Mode <<( (Copy_U8Pin -8)*4) ) ;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <Port_SetPinMode+0xd8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	79b9      	ldrb	r1, [r7, #6]
 8002722:	79fa      	ldrb	r2, [r7, #7]
 8002724:	3a08      	subs	r2, #8
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <Port_SetPinMode+0xd8>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6053      	str	r3, [r2, #4]
		if (Copy_U8Pin  <= A7 ){
 8002734:	e016      	b.n	8002764 <Port_SetPinMode+0xc8>
	else if (Copy_U8Pin >= C13  && Copy_U8Pin <= C15){
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b2c      	cmp	r3, #44	; 0x2c
 800273a:	d913      	bls.n	8002764 <Port_SetPinMode+0xc8>
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	2b2f      	cmp	r3, #47	; 0x2f
 8002740:	d810      	bhi.n	8002764 <Port_SetPinMode+0xc8>
		CLR_BIT(Copy_U8Pin,5);
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f023 0320 	bic.w	r3, r3, #32
 8002748:	71fb      	strb	r3, [r7, #7]
		GPIOB->CRH |= ( Copy_U8Mode <<( (Copy_U8Pin -8)*4) ) ;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <Port_SetPinMode+0xd8>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	79b9      	ldrb	r1, [r7, #6]
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	3a08      	subs	r2, #8
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <Port_SetPinMode+0xd8>)
 800275e:	430b      	orrs	r3, r1
 8002760:	6053      	str	r3, [r2, #4]
}
 8002762:	e7ff      	b.n	8002764 <Port_SetPinMode+0xc8>
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010800 	.word	0x40010800
 8002774:	40010c00 	.word	0x40010c00

08002778 <Dio_WriteChannel>:
			}
		}
}

void Dio_WriteChannel( Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
	if ( ChannelId >= A0 && ChannelId <= A15 )
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d817      	bhi.n	80027be <Dio_WriteChannel+0x46>
	{	if(Level ==HIGH){
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10a      	bne.n	80027aa <Dio_WriteChannel+0x32>
	SET_BIT(GPIOA ->BSRR, ChannelId);
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <Dio_WriteChannel+0xdc>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	79fa      	ldrb	r2, [r7, #7]
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4611      	mov	r1, r2
 80027a2:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <Dio_WriteChannel+0xdc>)
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6113      	str	r3, [r2, #16]
 80027a8:	e009      	b.n	80027be <Dio_WriteChannel+0x46>
}
else
{
	SET_BIT(GPIOA->BRR,ChannelId);
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <Dio_WriteChannel+0xdc>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <Dio_WriteChannel+0xdc>)
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6153      	str	r3, [r2, #20]
}
}
	if ( ChannelId >= B0 && ChannelId <= B15 )
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d91f      	bls.n	8002804 <Dio_WriteChannel+0x8c>
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b1f      	cmp	r3, #31
 80027c8:	d81c      	bhi.n	8002804 <Dio_WriteChannel+0x8c>
	{			CLR_BIT(ChannelId,4);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f023 0310 	bic.w	r3, r3, #16
 80027d0:	71fb      	strb	r3, [r7, #7]

		if(Level ==HIGH){
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10a      	bne.n	80027ee <Dio_WriteChannel+0x76>
	SET_BIT(GPIOB ->BSRR, ChannelId);
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <Dio_WriteChannel+0xe0>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <Dio_WriteChannel+0xe0>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6113      	str	r3, [r2, #16]
		if(Level ==HIGH){
 80027ec:	e02d      	b.n	800284a <Dio_WriteChannel+0xd2>
}
else
{
	SET_BIT(GPIOB->BRR,ChannelId);
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <Dio_WriteChannel+0xe0>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <Dio_WriteChannel+0xe0>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6153      	str	r3, [r2, #20]
		if(Level ==HIGH){
 8002802:	e022      	b.n	800284a <Dio_WriteChannel+0xd2>
}
}
	else if ( ChannelId >= C0 && ChannelId <= C15 )
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b1f      	cmp	r3, #31
 8002808:	d91f      	bls.n	800284a <Dio_WriteChannel+0xd2>
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b2f      	cmp	r3, #47	; 0x2f
 800280e:	d81c      	bhi.n	800284a <Dio_WriteChannel+0xd2>
	{			CLR_BIT(ChannelId,5);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f023 0320 	bic.w	r3, r3, #32
 8002816:	71fb      	strb	r3, [r7, #7]
		if(Level ==HIGH){
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10a      	bne.n	8002834 <Dio_WriteChannel+0xbc>
	SET_BIT(GPIOC ->BSRR, ChannelId);
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <Dio_WriteChannel+0xe4>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <Dio_WriteChannel+0xe4>)
 800282e:	430b      	orrs	r3, r1
 8002830:	6113      	str	r3, [r2, #16]
else
{
	SET_BIT(GPIOC->BRR,ChannelId);
}
}
}
 8002832:	e00a      	b.n	800284a <Dio_WriteChannel+0xd2>
	SET_BIT(GPIOC->BRR,ChannelId);
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <Dio_WriteChannel+0xe4>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4a06      	ldr	r2, [pc, #24]	; (800285c <Dio_WriteChannel+0xe4>)
 8002844:	430b      	orrs	r3, r1
 8002846:	6153      	str	r3, [r2, #20]
}
 8002848:	e7ff      	b.n	800284a <Dio_WriteChannel+0xd2>
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40010800 	.word	0x40010800
 8002858:	40010c00 	.word	0x40010c00
 800285c:	40011000 	.word	0x40011000

08002860 <RCC_voidInitializeSystemClock>:

#include "../Inc/MRCC_interface.h"
#include "../Inc/MRCC_cfg.h"

void RCC_voidInitializeSystemClock(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
		SET_BIT(RCC_CR ,RCC_HSI_ON);
		CLR_BIT(RCC_CR ,RCC_HSE_ON);
		CLR_BIT(RCC_CR ,RCC_PLL_ON);

	#elif RCC_CLOCK_SOURCE == RCC_HSE
		CLR_BIT(RCC_CR ,RCC_HSI_ON);
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC_CR ,RCC_HSE_ON);
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC_CR ,RCC_PLL_ON);
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a29      	ldr	r2, [pc, #164]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 8002882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002886:	6013      	str	r3, [r2, #0]
		/* Configure HSE type */
	#if RCC_HSE_TYPE == RCC_RC
		SET_BIT(RCC_CR , RCC_HSE_BYP);

	#elif RCC_HSE_TYPE == RCC_CRYSTAL
		CLR_BIT(RCC_CR , RCC_HSE_BYP);
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]
		/* Configure Clock security system */
	#if CLOCK_SECURITY_SYSTEM == RCC_CSS_ENABLE
		SET_BIT(RCC_CR , RCC_CSS_ON);

	#elif CLOCK_SECURITY_SYSTEM == RCC_CSS_DISABLE
		CLR_BIT(RCC_CR , RCC_CSS_ON);
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a23      	ldr	r2, [pc, #140]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 800289a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800289e:	6013      	str	r3, [r2, #0]
	#else
		#error("You Choose Wrong Clock security system")
	#endif

		RCC_CR &= RCC_HSITRIM_MASK;
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 80028a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028aa:	6013      	str	r3, [r2, #0]
		RCC_CR |= RCC_HSI_CLOCK_TRIMMING;
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <RCC_voidInitializeSystemClock+0xc8>)
 80028b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b6:	6013      	str	r3, [r2, #0]

		RCC_CFGR &= RCC_HCLK_APB2_PRESCALER_MASK;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80028c2:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_APB_HIGH_SPEED_PRESCALER;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6013      	str	r3, [r2, #0]

		RCC_CFGR &= RCC_HCLK_APB1_PRESCALER_MASK;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028d6:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_APB_LOW_SPEED_PRESCALER;
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6013      	str	r3, [r2, #0]

		RCC_CFGR &= RCC_AHB_PRESCALER_MASK;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_AHP_PRESCALER;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6013      	str	r3, [r2, #0]

		RCC_CFGR &= RCC_SW_MASK;
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_SYSTEM_CLOCK;
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <RCC_voidInitializeSystemClock+0xcc>)
 8002906:	f043 030d 	orr.w	r3, r3, #13
 800290a:	6013      	str	r3, [r2, #0]

		 RCC_voidEnablePeripheralClock(RCC_APB2,RCC_GPIOA);
 800290c:	2102      	movs	r1, #2
 800290e:	2002      	movs	r0, #2
 8002910:	f000 f80e 	bl	8002930 <RCC_voidEnablePeripheralClock>
		 RCC_voidEnablePeripheralClock(RCC_APB2,RCC_GPIOB);
 8002914:	2103      	movs	r1, #3
 8002916:	2002      	movs	r0, #2
 8002918:	f000 f80a 	bl	8002930 <RCC_voidEnablePeripheralClock>
		 RCC_voidEnablePeripheralClock(RCC_APB2,RCC_GPIOC);
 800291c:	2104      	movs	r1, #4
 800291e:	2002      	movs	r0, #2
 8002920:	f000 f806 	bl	8002930 <RCC_voidEnablePeripheralClock>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	40021004 	.word	0x40021004

08002930 <RCC_voidEnablePeripheralClock>:
			case RCC_APB1 : SET_BIT(RCC_APB1RSTR, local_peripheralId);break;
			case RCC_APB2 : SET_BIT(RCC_APB2RSTR, local_peripheralId);break;
		}}}

void RCC_voidEnablePeripheralClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8PerId <= 31)
 8002940:	79bb      	ldrb	r3, [r7, #6]
 8002942:	2b1f      	cmp	r3, #31
 8002944:	d82a      	bhi.n	800299c <RCC_voidEnablePeripheralClock+0x6c>
	{
		switch(Copy_u8BusId)
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d01c      	beq.n	8002986 <RCC_voidEnablePeripheralClock+0x56>
 800294c:	2b02      	cmp	r3, #2
 800294e:	dc26      	bgt.n	800299e <RCC_voidEnablePeripheralClock+0x6e>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <RCC_voidEnablePeripheralClock+0x2a>
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00b      	beq.n	8002970 <RCC_voidEnablePeripheralClock+0x40>
		{
			case RCC_AHB  : SET_BIT(RCC_AHBENR, Copy_u8PerId);break;
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8PerId);break;
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8PerId);break;
		}}}
 8002958:	e021      	b.n	800299e <RCC_voidEnablePeripheralClock+0x6e>
			case RCC_AHB  : SET_BIT(RCC_AHBENR, Copy_u8PerId);break;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <RCC_voidEnablePeripheralClock+0x78>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	79ba      	ldrb	r2, [r7, #6]
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4611      	mov	r1, r2
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <RCC_voidEnablePeripheralClock+0x78>)
 800296a:	430b      	orrs	r3, r1
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e016      	b.n	800299e <RCC_voidEnablePeripheralClock+0x6e>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8PerId);break;
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <RCC_voidEnablePeripheralClock+0x7c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	79ba      	ldrb	r2, [r7, #6]
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4611      	mov	r1, r2
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <RCC_voidEnablePeripheralClock+0x7c>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e00b      	b.n	800299e <RCC_voidEnablePeripheralClock+0x6e>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8PerId);break;
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_voidEnablePeripheralClock+0x80>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	79ba      	ldrb	r2, [r7, #6]
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <RCC_voidEnablePeripheralClock+0x80>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e000      	b.n	800299e <RCC_voidEnablePeripheralClock+0x6e>
		}}}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40021014 	.word	0x40021014
 80029ac:	4002101c 	.word	0x4002101c
 80029b0:	40021018 	.word	0x40021018

080029b4 <USART_VidInit>:
 * \enduml
 */


void USART_VidInit(const USART_ConfigType *USART_CFG)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    if (USART_CFG == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80c8 	beq.w	8002b54 <USART_VidInit+0x1a0>
        return;

	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e0bf      	b.n	8002b4a <USART_VidInit+0x196>
	    {
 if (USART_CFG->UART_Array[i].USARTEnableType == UE_DISEBLE)
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	3308      	adds	r3, #8
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80b0 	beq.w	8002b42 <USART_VidInit+0x18e>
	continue;


 switch (USART_CFG->UART_Array[i].USARTid)
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d02e      	beq.n	8002a54 <USART_VidInit+0xa0>
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	dc44      	bgt.n	8002a84 <USART_VidInit+0xd0>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <USART_VidInit+0x50>
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d018      	beq.n	8002a34 <USART_VidInit+0x80>
 8002a02:	e03f      	b.n	8002a84 <USART_VidInit+0xd0>
 {
 case UART1:
	RCC_voidEnablePeripheralClock(RCC_APB2,RCC_USART1);
 8002a04:	210e      	movs	r1, #14
 8002a06:	2002      	movs	r0, #2
 8002a08:	f7ff ff92 	bl	8002930 <RCC_voidEnablePeripheralClock>
	Port_SetPinDirection(A9,OUTPUT_2);
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	2009      	movs	r0, #9
 8002a10:	f7ff fd96 	bl	8002540 <Port_SetPinDirection>
	Port_SetPinDirection(A10,INPUT);
 8002a14:	2100      	movs	r1, #0
 8002a16:	200a      	movs	r0, #10
 8002a18:	f7ff fd92 	bl	8002540 <Port_SetPinDirection>
	Port_SetPinMode(A9, A_PUSH_PULL);
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	2009      	movs	r0, #9
 8002a20:	f7ff fe3c 	bl	800269c <Port_SetPinMode>
	Port_SetPinMode(A10, FLOATING_INPUT);
 8002a24:	2104      	movs	r1, #4
 8002a26:	200a      	movs	r0, #10
 8002a28:	f7ff fe38 	bl	800269c <Port_SetPinMode>
	UART_PTR = MUART1;
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <USART_VidInit+0x1a8>)
 8002a2e:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <USART_VidInit+0x1ac>)
 8002a30:	601a      	str	r2, [r3, #0]
	break;
 8002a32:	e027      	b.n	8002a84 <USART_VidInit+0xd0>
 case UART2:
	RCC_voidEnablePeripheralClock(RCC_APB1,RCC_USART2);
 8002a34:	2111      	movs	r1, #17
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff ff7a 	bl	8002930 <RCC_voidEnablePeripheralClock>
	Port_SetPinDirection(A2,OUTPUT_2);
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f7ff fd7e 	bl	8002540 <Port_SetPinDirection>
	//Port_SetPinDirection(A3,INPUT);
	Port_SetPinMode(A2, A_PUSH_PULL);
 8002a44:	2108      	movs	r1, #8
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7ff fe28 	bl	800269c <Port_SetPinMode>
	//Port_SetPinMode(A3, FLOATING_INPUT);
	UART_PTR = MUART2;
 8002a4c:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <USART_VidInit+0x1a8>)
 8002a4e:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <USART_VidInit+0x1b0>)
 8002a50:	601a      	str	r2, [r3, #0]
	break;
 8002a52:	e017      	b.n	8002a84 <USART_VidInit+0xd0>

 case UART3:
	RCC_voidEnablePeripheralClock(RCC_APB1,RCC_USART3);
 8002a54:	2112      	movs	r1, #18
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff ff6a 	bl	8002930 <RCC_voidEnablePeripheralClock>
	Port_SetPinDirection(B10,OUTPUT_2);
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	201a      	movs	r0, #26
 8002a60:	f7ff fd6e 	bl	8002540 <Port_SetPinDirection>
	Port_SetPinDirection(B11,INPUT);
 8002a64:	2100      	movs	r1, #0
 8002a66:	201b      	movs	r0, #27
 8002a68:	f7ff fd6a 	bl	8002540 <Port_SetPinDirection>
	Port_SetPinMode(B10, A_PUSH_PULL);
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	201a      	movs	r0, #26
 8002a70:	f7ff fe14 	bl	800269c <Port_SetPinMode>
	Port_SetPinMode(B11, FLOATING_INPUT);
 8002a74:	2104      	movs	r1, #4
 8002a76:	201b      	movs	r0, #27
 8002a78:	f7ff fe10 	bl	800269c <Port_SetPinMode>
	UART_PTR = MUART3;
 8002a7c:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <USART_VidInit+0x1a8>)
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <USART_VidInit+0x1b4>)
 8002a80:	601a      	str	r2, [r3, #0]
	break;
 8002a82:	bf00      	nop
}


UART_PTR->BR.R = USART_CFG->UART_Array[i].USARTBaud;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	440b      	add	r3, r1
 8002a92:	3302      	adds	r3, #2
 8002a94:	881a      	ldrh	r2, [r3, #0]
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <USART_VidInit+0x1a8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	609a      	str	r2, [r3, #8]
UART_PTR->CR1.B.M= USART_CFG->UART_Array[i].USARTWordLength;
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3304      	adds	r3, #4
 8002aac:	7819      	ldrb	r1, [r3, #0]
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <USART_VidInit+0x1a8>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	b2d9      	uxtb	r1, r3
 8002aba:	68d3      	ldr	r3, [r2, #12]
 8002abc:	f361 330c 	bfi	r3, r1, #12, #1
 8002ac0:	60d3      	str	r3, [r2, #12]
UART_PTR->CR2.B.STOP = USART_CFG->UART_Array[i].USARTStopBits;
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	3305      	adds	r3, #5
 8002ad2:	7819      	ldrb	r1, [r3, #0]
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <USART_VidInit+0x1a8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	b2d9      	uxtb	r1, r3
 8002ae0:	6913      	ldr	r3, [r2, #16]
 8002ae2:	f361 330d 	bfi	r3, r1, #12, #2
 8002ae6:	6113      	str	r3, [r2, #16]
UART_PTR->CR1.B.REnTE = USART_CFG->UART_Array[i].USARTMode;
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	440b      	add	r3, r1
 8002af6:	3306      	adds	r3, #6
 8002af8:	7819      	ldrb	r1, [r3, #0]
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <USART_VidInit+0x1a8>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	460b      	mov	r3, r1
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	b2d9      	uxtb	r1, r3
 8002b06:	68d3      	ldr	r3, [r2, #12]
 8002b08:	f361 0383 	bfi	r3, r1, #2, #2
 8002b0c:	60d3      	str	r3, [r2, #12]
UART_PTR->CR1.B.PSnPCE = USART_CFG->UART_Array[i].USARTParitySelection;
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3307      	adds	r3, #7
 8002b1e:	7819      	ldrb	r1, [r3, #0]
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <USART_VidInit+0x1a8>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	b2d9      	uxtb	r1, r3
 8002b2c:	68d3      	ldr	r3, [r2, #12]
 8002b2e:	f361 234a 	bfi	r3, r1, #9, #2
 8002b32:	60d3      	str	r3, [r2, #12]
					/*Start the USART*/
		UART_PTR->CR1.B.UE = UE_ENABLE;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <USART_VidInit+0x1a8>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68d3      	ldr	r3, [r2, #12]
 8002b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3e:	60d3      	str	r3, [r2, #12]
 8002b40:	e000      	b.n	8002b44 <USART_VidInit+0x190>
	continue;
 8002b42:	bf00      	nop
	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f77f af3c 	ble.w	80029ca <USART_VidInit+0x16>
 8002b52:	e000      	b.n	8002b56 <USART_VidInit+0x1a2>
        return;
 8002b54:	bf00      	nop
}
}
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200045ac 	.word	0x200045ac
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40004800 	.word	0x40004800

08002b6c <USART_ReceiveByte>:
 *	:return recievedData;
 * end
 * \enduml
*/
u8 USART_ReceiveByte(USART_ID UART_ID)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
    u8 Copy_U8Data;
    u32 Copy_U32TimeOut=0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
	//UART_PTR->DR.R = 0;
	switch(UART_ID)
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00e      	beq.n	8002b9e <USART_ReceiveByte+0x32>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	dc14      	bgt.n	8002bae <USART_ReceiveByte+0x42>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <USART_ReceiveByte+0x22>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d004      	beq.n	8002b96 <USART_ReceiveByte+0x2a>
 8002b8c:	e00b      	b.n	8002ba6 <USART_ReceiveByte+0x3a>
	{
	case UART1:
		UART_PTR = MUART1;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <USART_ReceiveByte+0x90>)
 8002b92:	601a      	str	r2, [r3, #0]
		break;
 8002b94:	e007      	b.n	8002ba6 <USART_ReceiveByte+0x3a>
	case UART2:
		UART_PTR = MUART2;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <USART_ReceiveByte+0x94>)
 8002b9a:	601a      	str	r2, [r3, #0]
		break;
 8002b9c:	e003      	b.n	8002ba6 <USART_ReceiveByte+0x3a>
	case UART3:
		UART_PTR = MUART3;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <USART_ReceiveByte+0x98>)
 8002ba2:	601a      	str	r2, [r3, #0]
		break;
 8002ba4:	bf00      	nop
	}
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 8002ba6:	e002      	b.n	8002bae <USART_ReceiveByte+0x42>
    {
           Copy_U32TimeOut++;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <USART_ReceiveByte+0x5a>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <USART_ReceiveByte+0x9c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d9f0      	bls.n	8002ba8 <USART_ReceiveByte+0x3c>
       }

       if(Copy_U32TimeOut == THRESHOLD_VALUE)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <USART_ReceiveByte+0xa0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d102      	bne.n	8002bd4 <USART_ReceiveByte+0x68>
       {
           Copy_U8Data = 255;
 8002bce:	23ff      	movs	r3, #255	; 0xff
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e005      	b.n	8002be0 <USART_ReceiveByte+0x74>
       }
       else
       {
           Copy_U8Data = UART_PTR->DR.R;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
           Copy_U32TimeOut=0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]

       }
       UART_PTR->SR.B.RXNE = 0;
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <USART_ReceiveByte+0x8c>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f36f 1345 	bfc	r3, #5, #1
 8002bea:	6013      	str	r3, [r2, #0]
       return Copy_U8Data;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	200045ac 	.word	0x200045ac
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40004800 	.word	0x40004800
 8002c08:	0001869f 	.word	0x0001869f
 8002c0c:	000186a0 	.word	0x000186a0

08002c10 <USART_VidSendChar>:
 *	:MUART->SR.B.TC = 0;
 * end
 * \enduml
 */
void USART_VidSendChar(USART_ID UART_ID, u8 Copy_U8Data)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71bb      	strb	r3, [r7, #6]
	switch(UART_ID)
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d00e      	beq.n	8002c44 <USART_VidSendChar+0x34>
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	dc10      	bgt.n	8002c4c <USART_VidSendChar+0x3c>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <USART_VidSendChar+0x24>
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d004      	beq.n	8002c3c <USART_VidSendChar+0x2c>
 8002c32:	e00b      	b.n	8002c4c <USART_VidSendChar+0x3c>
		{
		case UART1:
			UART_PTR = MUART1;
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <USART_VidSendChar+0x74>)
 8002c38:	601a      	str	r2, [r3, #0]
			break;
 8002c3a:	e007      	b.n	8002c4c <USART_VidSendChar+0x3c>
		case UART2:
			UART_PTR = MUART2;
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <USART_VidSendChar+0x78>)
 8002c40:	601a      	str	r2, [r3, #0]
			break;
 8002c42:	e003      	b.n	8002c4c <USART_VidSendChar+0x3c>
		case UART3:
			UART_PTR = MUART3;
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <USART_VidSendChar+0x7c>)
 8002c48:	601a      	str	r2, [r3, #0]
			break;
 8002c4a:	bf00      	nop
		}

	UART_PTR->SR.B.TC = 0;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	f36f 1386 	bfc	r3, #6, #1
 8002c56:	6013      	str	r3, [r2, #0]
	UART_PTR->DR.R = Copy_U8Data;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	79ba      	ldrb	r2, [r7, #6]
 8002c5e:	605a      	str	r2, [r3, #4]
    while (!UART_PTR->SR.B.TC);
 8002c60:	bf00      	nop
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <USART_VidSendChar+0x70>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f7      	beq.n	8002c62 <USART_VidSendChar+0x52>
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	200045ac 	.word	0x200045ac
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40004400 	.word	0x40004400
 8002c8c:	40004800 	.word	0x40004800

08002c90 <USART_TransmitString>:
  * stop
  * \enduml
  */

 void USART_TransmitString(USART_ID UART_ID,u8 *string_Copy_U8Data)
 {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e00b      	b.n	8002cba <USART_TransmitString+0x2a>
     	USART_VidSendChar(UART_ID, string_Copy_U8Data[i]);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ffae 	bl	8002c10 <USART_VidSendChar>
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ed      	bne.n	8002ca2 <USART_TransmitString+0x12>
 }
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <main>:
	TaskHandle_t taskHandle_t5;



int main(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8

	 u8 ret;
	 xQueue1 = xQueueCreate( 1, sizeof( u8 ) );
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7fd fb60 	bl	80003a0 <xQueueGenericCreate>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <main+0x12c>)
 8002ce4:	6013      	str	r3, [r2, #0]
	 if( xQueue1 == NULL )
 8002ce6:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <main+0x12c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d100      	bne.n	8002cf0 <main+0x20>
	     {
	     while(1);
 8002cee:	e7fe      	b.n	8002cee <main+0x1e>
	     }
	  ret= xTaskCreate(Task_Init,("Task1"), (configSTACK_DEPTH_TYPE)50, "Hello world", (UBaseType_t)9, &taskHandle_t1 );
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <main+0x130>)
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2309      	movs	r3, #9
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <main+0x134>)
 8002cfa:	2232      	movs	r2, #50	; 0x32
 8002cfc:	4942      	ldr	r1, [pc, #264]	; (8002e08 <main+0x138>)
 8002cfe:	4843      	ldr	r0, [pc, #268]	; (8002e0c <main+0x13c>)
 8002d00:	f7fd fe8a 	bl	8000a18 <xTaskCreate>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
	  configASSERT(ret == pdPASS);
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00a      	beq.n	8002d24 <main+0x54>
        __asm volatile
 8002d0e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	613b      	str	r3, [r7, #16]
    }
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <main+0x52>
	  ret= xTaskCreate(Task_manager,("Task2"), (configSTACK_DEPTH_TYPE)50, "Hello world 2", (UBaseType_t)4, &taskHandle_t2 );
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <main+0x140>)
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2304      	movs	r3, #4
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <main+0x144>)
 8002d2e:	2232      	movs	r2, #50	; 0x32
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <main+0x148>)
 8002d32:	483a      	ldr	r0, [pc, #232]	; (8002e1c <main+0x14c>)
 8002d34:	f7fd fe70 	bl	8000a18 <xTaskCreate>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]
	  configASSERT(ret == pdPASS);
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00a      	beq.n	8002d58 <main+0x88>
        __asm volatile
 8002d42:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	60fb      	str	r3, [r7, #12]
    }
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <main+0x86>
	  ret= xTaskCreate(Task_Action,("Task3"), (configSTACK_DEPTH_TYPE)50, "Hello world 3", (UBaseType_t)3, &taskHandle_t3 );
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <main+0x150>)
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <main+0x154>)
 8002d62:	2232      	movs	r2, #50	; 0x32
 8002d64:	4930      	ldr	r1, [pc, #192]	; (8002e28 <main+0x158>)
 8002d66:	4831      	ldr	r0, [pc, #196]	; (8002e2c <main+0x15c>)
 8002d68:	f7fd fe56 	bl	8000a18 <xTaskCreate>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
	  configASSERT(ret == pdPASS);
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d00a      	beq.n	8002d8c <main+0xbc>
        __asm volatile
 8002d76:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	60bb      	str	r3, [r7, #8]
    }
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <main+0xba>
	  ret= xTaskCreate(Task_led,("Task4"), (configSTACK_DEPTH_TYPE)50, "Hello world 4", (UBaseType_t)2, &taskHandle_t4 );
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <main+0x160>)
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <main+0x164>)
 8002d96:	2232      	movs	r2, #50	; 0x32
 8002d98:	4927      	ldr	r1, [pc, #156]	; (8002e38 <main+0x168>)
 8002d9a:	4828      	ldr	r0, [pc, #160]	; (8002e3c <main+0x16c>)
 8002d9c:	f7fd fe3c 	bl	8000a18 <xTaskCreate>
 8002da0:	4603      	mov	r3, r0
 8002da2:	75fb      	strb	r3, [r7, #23]
	  configASSERT(ret == pdPASS);
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00a      	beq.n	8002dc0 <main+0xf0>
        __asm volatile
 8002daa:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	607b      	str	r3, [r7, #4]
    }
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <main+0xee>
	  ret= xTaskCreate(Task_LCD,("Task5"), (configSTACK_DEPTH_TYPE)50, "Hello world 5", (UBaseType_t)2, &taskHandle_t5 );
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <main+0x170>)
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <main+0x174>)
 8002dca:	2232      	movs	r2, #50	; 0x32
 8002dcc:	491e      	ldr	r1, [pc, #120]	; (8002e48 <main+0x178>)
 8002dce:	481f      	ldr	r0, [pc, #124]	; (8002e4c <main+0x17c>)
 8002dd0:	f7fd fe22 	bl	8000a18 <xTaskCreate>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
	  configASSERT(ret == pdPASS);
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d00a      	beq.n	8002df4 <main+0x124>
        __asm volatile
 8002dde:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	603b      	str	r3, [r7, #0]
    }
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <main+0x122>


	  vTaskStartScheduler();
 8002df4:	f7fe f908 	bl	8001008 <vTaskStartScheduler>

    /* Loop forever */
	for(;;);
 8002df8:	e7fe      	b.n	8002df8 <main+0x128>
 8002dfa:	bf00      	nop
 8002dfc:	200045b4 	.word	0x200045b4
 8002e00:	200045c4 	.word	0x200045c4
 8002e04:	08003044 	.word	0x08003044
 8002e08:	08003050 	.word	0x08003050
 8002e0c:	08002329 	.word	0x08002329
 8002e10:	200045c0 	.word	0x200045c0
 8002e14:	08003058 	.word	0x08003058
 8002e18:	08003068 	.word	0x08003068
 8002e1c:	080023ad 	.word	0x080023ad
 8002e20:	200045bc 	.word	0x200045bc
 8002e24:	08003070 	.word	0x08003070
 8002e28:	08003080 	.word	0x08003080
 8002e2c:	08002415 	.word	0x08002415
 8002e30:	200045c8 	.word	0x200045c8
 8002e34:	08003088 	.word	0x08003088
 8002e38:	08003098 	.word	0x08003098
 8002e3c:	080024b1 	.word	0x080024b1
 8002e40:	200045b8 	.word	0x200045b8
 8002e44:	080030a0 	.word	0x080030a0
 8002e48:	080030b0 	.word	0x080030b0
 8002e4c:	080024f9 	.word	0x080024f9

08002e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e52:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e54:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <LoopForever+0xe>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <LoopForever+0x16>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e7e:	f000 f811 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e82:	f7ff ff25 	bl	8002cd0 <main>

08002e86 <LoopForever>:

LoopForever:
    b LoopForever
 8002e86:	e7fe      	b.n	8002e86 <LoopForever>
  ldr   r0, =_estack
 8002e88:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002e94:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8002e98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002e9c:	200045cc 	.word	0x200045cc

08002ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <ADC1_2_IRQHandler>
	...

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 f830 	bl	8002f18 <_init>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	080030b8 	.word	0x080030b8
 8002ee0:	080030b8 	.word	0x080030b8
 8002ee4:	080030b8 	.word	0x080030b8
 8002ee8:	080030bc 	.word	0x080030bc

08002eec <memcpy>:
 8002eec:	440a      	add	r2, r1
 8002eee:	4291      	cmp	r1, r2
 8002ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ef4:	d100      	bne.n	8002ef8 <memcpy+0xc>
 8002ef6:	4770      	bx	lr
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002efe:	4291      	cmp	r1, r2
 8002f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f04:	d1f9      	bne.n	8002efa <memcpy+0xe>
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <memset>:
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4402      	add	r2, r0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d100      	bne.n	8002f12 <memset+0xa>
 8002f10:	4770      	bx	lr
 8002f12:	f803 1b01 	strb.w	r1, [r3], #1
 8002f16:	e7f9      	b.n	8002f0c <memset+0x4>

08002f18 <_init>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr

08002f24 <_fini>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr
